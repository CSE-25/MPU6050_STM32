
Self_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db4  08005db4  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005db4  08005db4  00006db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dbc  08005dbc  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dc0  08005dc0  00006dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005dc4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          0000fa6c  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000fa80  2000fa80  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011330  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029dc  00000000  00000000  00018374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  0001ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da1  00000000  00000000  0001bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002255e  00000000  00000000  0001cc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014567  00000000  00000000  0003f1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3f6f  00000000  00000000  00053726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127695  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ae8  00000000  00000000  001276d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d50 	.word	0x08005d50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005d50 	.word	0x08005d50

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	460c      	mov	r4, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d14e      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	458c      	cmp	ip, r1
 8000a4c:	4686      	mov	lr, r0
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	d962      	bls.n	8000b1a <__udivmoddi4+0xde>
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	4319      	orrs	r1, r3
 8000a66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb04 f106 	mul.w	r1, r4, r6
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a92:	f080 8112 	bcs.w	8000cba <__udivmoddi4+0x27e>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 810f 	bls.w	8000cba <__udivmoddi4+0x27e>
 8000a9c:	3c02      	subs	r4, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a59      	subs	r1, r3, r1
 8000aa2:	fa1f f38e 	uxth.w	r3, lr
 8000aa6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f606 	mul.w	r6, r0, r6
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x94>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac2:	f080 80fc 	bcs.w	8000cbe <__udivmoddi4+0x282>
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	f240 80f9 	bls.w	8000cbe <__udivmoddi4+0x282>
 8000acc:	4463      	add	r3, ip
 8000ace:	3802      	subs	r0, #2
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	b11d      	cbz	r5, 8000ae2 <__udivmoddi4+0xa6>
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2200      	movs	r2, #0
 8000ade:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d905      	bls.n	8000af6 <__udivmoddi4+0xba>
 8000aea:	b10d      	cbz	r5, 8000af0 <__udivmoddi4+0xb4>
 8000aec:	e9c5 0100 	strd	r0, r1, [r5]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
 8000af4:	e7f5      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000af6:	fab3 f183 	clz	r1, r3
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d146      	bne.n	8000b8c <__udivmoddi4+0x150>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xcc>
 8000b02:	4290      	cmp	r0, r2
 8000b04:	f0c0 80f0 	bcc.w	8000ce8 <__udivmoddi4+0x2ac>
 8000b08:	1a86      	subs	r6, r0, r2
 8000b0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__udivmoddi4+0xa6>
 8000b14:	e9c5 6300 	strd	r6, r3, [r5]
 8000b18:	e7e3      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8090 	bne.w	8000c40 <__udivmoddi4+0x204>
 8000b20:	eba1 040c 	sub.w	r4, r1, ip
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb07 f006 	mul.w	r0, r7, r6
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x11c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x11a>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b56:	4626      	mov	r6, r4
 8000b58:	1a1c      	subs	r4, r3, r0
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b62:	fb08 4410 	mls	r4, r8, r0, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb00 f707 	mul.w	r7, r0, r7
 8000b6e:	429f      	cmp	r7, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x148>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x146>
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	f200 80b0 	bhi.w	8000ce2 <__udivmoddi4+0x2a6>
 8000b82:	4620      	mov	r0, r4
 8000b84:	1bdb      	subs	r3, r3, r7
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0x9c>
 8000b8c:	f1c1 0620 	rsb	r6, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 f706 	lsr.w	r7, r2, r6
 8000b96:	431f      	orrs	r7, r3
 8000b98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba0:	ea43 030c 	orr.w	r3, r3, ip
 8000ba4:	40f4      	lsrs	r4, r6
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	0c38      	lsrs	r0, r7, #16
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc4:	45a1      	cmp	r9, r4
 8000bc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x1a6>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bd2:	f080 8084 	bcs.w	8000cde <__udivmoddi4+0x2a2>
 8000bd6:	45a1      	cmp	r9, r4
 8000bd8:	f240 8081 	bls.w	8000cde <__udivmoddi4+0x2a2>
 8000bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	eba4 0409 	sub.w	r4, r4, r9
 8000be6:	fa1f f983 	uxth.w	r9, r3
 8000bea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bee:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x1d2>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c04:	d267      	bcs.n	8000cd6 <__udivmoddi4+0x29a>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	d965      	bls.n	8000cd6 <__udivmoddi4+0x29a>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c12:	fba0 9302 	umull	r9, r3, r0, r2
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	46ce      	mov	lr, r9
 8000c1e:	469c      	mov	ip, r3
 8000c20:	d351      	bcc.n	8000cc6 <__udivmoddi4+0x28a>
 8000c22:	d04e      	beq.n	8000cc2 <__udivmoddi4+0x286>
 8000c24:	b155      	cbz	r5, 8000c3c <__udivmoddi4+0x200>
 8000c26:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	431e      	orrs	r6, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e750      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f103 	lsr.w	r1, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c50:	4094      	lsls	r4, r2
 8000c52:	430c      	orrs	r4, r1
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3110 	mls	r1, r8, r0, r3
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f107 	mul.w	r1, r0, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x24c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c7e:	d22c      	bcs.n	8000cda <__udivmoddi4+0x29e>
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d92a      	bls.n	8000cda <__udivmoddi4+0x29e>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c90:	fb08 3311 	mls	r3, r8, r1, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb01 f307 	mul.w	r3, r1, r7
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x276>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca8:	d213      	bcs.n	8000cd2 <__udivmoddi4+0x296>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d911      	bls.n	8000cd2 <__udivmoddi4+0x296>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	1ae4      	subs	r4, r4, r3
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e739      	b.n	8000b2e <__udivmoddi4+0xf2>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	e6f0      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e706      	b.n	8000ad0 <__udivmoddi4+0x94>
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d2ae      	bcs.n	8000c24 <__udivmoddi4+0x1e8>
 8000cc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7a8      	b.n	8000c24 <__udivmoddi4+0x1e8>
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__udivmoddi4+0x276>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e799      	b.n	8000c0e <__udivmoddi4+0x1d2>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e7d4      	b.n	8000c88 <__udivmoddi4+0x24c>
 8000cde:	46d6      	mov	lr, sl
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1a6>
 8000ce2:	4463      	add	r3, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e74d      	b.n	8000b84 <__udivmoddi4+0x148>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4623      	mov	r3, r4
 8000cec:	4608      	mov	r0, r1
 8000cee:	e70f      	b.n	8000b10 <__udivmoddi4+0xd4>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	e730      	b.n	8000b58 <__udivmoddi4+0x11c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <main>:

// Shared variables for accelerometer data
float ax = 0, ay = 0, az = 0;

int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af02      	add	r7, sp, #8
    HAL_Init();
 8000d02:	f000 fbf5 	bl	80014f0 <HAL_Init>
    SystemClock_Config();
 8000d06:	f000 f99d 	bl	8001044 <SystemClock_Config>
    MX_GPIO_Init();
 8000d0a:	f000 f9f9 	bl	8001100 <MX_GPIO_Init>
    I2C_Config();
 8000d0e:	f000 fa47 	bl	80011a0 <I2C_Config>

    // Initialize all LEDs to ON state to verify they're working
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d18:	4819      	ldr	r0, [pc, #100]	@ (8000d80 <main+0x84>)
 8000d1a:	f000 fecd 	bl	8001ab8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);  // Keep them on for 1 second
 8000d1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d22:	f000 fc27 	bl	8001574 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d2c:	4814      	ldr	r0, [pc, #80]	@ (8000d80 <main+0x84>)
 8000d2e:	f000 fec3 	bl	8001ab8 <HAL_GPIO_WritePin>

    // Initialize MPU6050
    if (MPU6050_Init() != HAL_OK) {
 8000d32:	f000 f82f 	bl	8000d94 <MPU6050_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d009      	beq.n	8000d50 <main+0x54>
        // If initialization fails, blink red LED rapidly
        while (1) {
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000d3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d40:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <main+0x84>)
 8000d42:	f000 fed2 	bl	8001aea <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f000 fc14 	bl	8001574 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000d4c:	bf00      	nop
 8000d4e:	e7f5      	b.n	8000d3c <main+0x40>
        }
    }

    // Create tasks
    xTaskCreate(task_mpu6050_read, "MPU6050 Read", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000d50:	2300      	movs	r3, #0
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2302      	movs	r3, #2
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2282      	movs	r2, #130	@ 0x82
 8000d5c:	4909      	ldr	r1, [pc, #36]	@ (8000d84 <main+0x88>)
 8000d5e:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <main+0x8c>)
 8000d60:	f003 f9a2 	bl	80040a8 <xTaskCreate>
    xTaskCreate(task_led_update, "LED Update", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000d64:	2300      	movs	r3, #0
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2282      	movs	r2, #130	@ 0x82
 8000d70:	4906      	ldr	r1, [pc, #24]	@ (8000d8c <main+0x90>)
 8000d72:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <main+0x94>)
 8000d74:	f003 f998 	bl	80040a8 <xTaskCreate>

    // Start the scheduler
    vTaskStartScheduler();
 8000d78:	f003 fb38 	bl	80043ec <vTaskStartScheduler>

    // We should never get here as control is now taken by the scheduler
    while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <main+0x80>
 8000d80:	40020c00 	.word	0x40020c00
 8000d84:	08005d68 	.word	0x08005d68
 8000d88:	08000fdd 	.word	0x08000fdd
 8000d8c:	08005d78 	.word	0x08005d78
 8000d90:	08001005 	.word	0x08001005

08000d94 <MPU6050_Init>:


    }
}
uint8_t MPU6050_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // Check device ID
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	2301      	movs	r3, #1
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	2275      	movs	r2, #117	@ 0x75
 8000dac:	21d0      	movs	r1, #208	@ 0xd0
 8000dae:	481d      	ldr	r0, [pc, #116]	@ (8000e24 <MPU6050_Init+0x90>)
 8000db0:	f001 f8f4 	bl	8001f9c <HAL_I2C_Mem_Read>

    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b68      	cmp	r3, #104	@ 0x68
 8000db8:	d12e      	bne.n	8000e18 <MPU6050_Init+0x84>
    {
        // Power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000);
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	226b      	movs	r2, #107	@ 0x6b
 8000dd0:	21d0      	movs	r1, #208	@ 0xd0
 8000dd2:	4814      	ldr	r0, [pc, #80]	@ (8000e24 <MPU6050_Init+0x90>)
 8000dd4:	f000 ffe8 	bl	8001da8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8000ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2301      	movs	r3, #1
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	1dbb      	adds	r3, r7, #6
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	2219      	movs	r2, #25
 8000dee:	21d0      	movs	r1, #208	@ 0xd0
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <MPU6050_Init+0x90>)
 8000df2:	f000 ffd9 	bl	8001da8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
        Data = 0x00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8000dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	1dbb      	adds	r3, r7, #6
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	221c      	movs	r2, #28
 8000e0c:	21d0      	movs	r1, #208	@ 0xd0
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MPU6050_Init+0x90>)
 8000e10:	f000 ffca 	bl	8001da8 <HAL_I2C_Mem_Write>

        return HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e000      	b.n	8000e1a <MPU6050_Init+0x86>
    }
    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000030 	.word	0x20000030

08000e28 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(float* ax, float* ay, float* az)


{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];
    int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;



    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8000e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2301      	movs	r3, #1
 8000e46:	223b      	movs	r2, #59	@ 0x3b
 8000e48:	21d0      	movs	r1, #208	@ 0xd0
 8000e4a:	482a      	ldr	r0, [pc, #168]	@ (8000ef4 <MPU6050_Read_Accel+0xcc>)
 8000e4c:	f001 f8a6 	bl	8001f9c <HAL_I2C_Mem_Read>

    Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000e50:	7d3b      	ldrb	r3, [r7, #20]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	7d7b      	ldrb	r3, [r7, #21]
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	83fb      	strh	r3, [r7, #30]
    Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000e5e:	7dbb      	ldrb	r3, [r7, #22]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	83bb      	strh	r3, [r7, #28]
    Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000e6c:	7e3b      	ldrb	r3, [r7, #24]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	7e7b      	ldrb	r3, [r7, #25]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	837b      	strh	r3, [r7, #26]


    *ax = Accel_X_RAW / 16384.0;
 8000e7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff faf8 	bl	8000474 <__aeabi_i2d>
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MPU6050_Read_Accel+0xd0>)
 8000e8a:	f7ff fc87 	bl	800079c <__aeabi_ddiv>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fd69 	bl	800096c <__aeabi_d2f>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	601a      	str	r2, [r3, #0]
    *ay = Accel_Y_RAW / 16384.0;
 8000ea0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fae5 	bl	8000474 <__aeabi_i2d>
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MPU6050_Read_Accel+0xd0>)
 8000eb0:	f7ff fc74 	bl	800079c <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fd56 	bl	800096c <__aeabi_d2f>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	601a      	str	r2, [r3, #0]
    *az = Accel_Z_RAW / 16384.0;
 8000ec6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fad2 	bl	8000474 <__aeabi_i2d>
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MPU6050_Read_Accel+0xd0>)
 8000ed6:	f7ff fc61 	bl	800079c <__aeabi_ddiv>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fd43 	bl	800096c <__aeabi_d2f>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	40d00000 	.word	0x40d00000

08000efc <UpdateLEDs>:
void UpdateLEDs(float x, float y, float z)




{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f0a:	ed87 1a01 	vstr	s2, [r7, #4]
    const float threshold = 0.3;  // Lowered the threshold for easier triggering
 8000f0e:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <UpdateLEDs+0xd8>)
 8000f10:	617b      	str	r3, [r7, #20]


    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000f18:	482f      	ldr	r0, [pc, #188]	@ (8000fd8 <UpdateLEDs+0xdc>)
 8000f1a:	f000 fdcd 	bl	8001ab8 <HAL_GPIO_WritePin>





    if (x > threshold || x < -threshold) {
 8000f1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	dc0a      	bgt.n	8000f46 <UpdateLEDs+0x4a>
 8000f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f34:	eef1 7a67 	vneg.f32	s15, s15
 8000f38:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d505      	bpl.n	8000f52 <UpdateLEDs+0x56>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  // Green LED for X-axis
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f4c:	4822      	ldr	r0, [pc, #136]	@ (8000fd8 <UpdateLEDs+0xdc>)
 8000f4e:	f000 fdb3 	bl	8001ab8 <HAL_GPIO_WritePin>
    }
    if (y > threshold || y < -threshold) {
 8000f52:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dc0a      	bgt.n	8000f7a <UpdateLEDs+0x7e>
 8000f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f68:	eef1 7a67 	vneg.f32	s15, s15
 8000f6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	d505      	bpl.n	8000f86 <UpdateLEDs+0x8a>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);  // Orange LED for Y-axis
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f80:	4815      	ldr	r0, [pc, #84]	@ (8000fd8 <UpdateLEDs+0xdc>)
 8000f82:	f000 fd99 	bl	8001ab8 <HAL_GPIO_WritePin>
    }
    if (z > threshold) {
 8000f86:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dd06      	ble.n	8000fa6 <UpdateLEDs+0xaa>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Red LED for positive Z-axis
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f9e:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <UpdateLEDs+0xdc>)
 8000fa0:	f000 fd8a 	bl	8001ab8 <HAL_GPIO_WritePin>
    } else if (z < -threshold) {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);  // Blue LED for negative Z-axis
    }
}
 8000fa4:	e011      	b.n	8000fca <UpdateLEDs+0xce>
    } else if (z < -threshold) {
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	eef1 7a67 	vneg.f32	s15, s15
 8000fae:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d400      	bmi.n	8000fbe <UpdateLEDs+0xc2>
}
 8000fbc:	e005      	b.n	8000fca <UpdateLEDs+0xce>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);  // Blue LED for negative Z-axis
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <UpdateLEDs+0xdc>)
 8000fc6:	f000 fd77 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	3e99999a 	.word	0x3e99999a
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <task_mpu6050_read>:
static void task_mpu6050_read(void* parameters)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]




    {
        MPU6050_Read_Accel(&ax, &ay, &az);
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <task_mpu6050_read+0x1c>)
 8000fe6:	4905      	ldr	r1, [pc, #20]	@ (8000ffc <task_mpu6050_read+0x20>)
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <task_mpu6050_read+0x24>)
 8000fea:	f7ff ff1d 	bl	8000e28 <MPU6050_Read_Accel>
        vTaskDelay(pdMS_TO_TICKS(50));  // 50ms delay
 8000fee:	2032      	movs	r0, #50	@ 0x32
 8000ff0:	f003 f9c6 	bl	8004380 <vTaskDelay>
        MPU6050_Read_Accel(&ax, &ay, &az);
 8000ff4:	bf00      	nop
 8000ff6:	e7f5      	b.n	8000fe4 <task_mpu6050_read+0x8>
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	20000088 	.word	0x20000088
 8001000:	20000084 	.word	0x20000084

08001004 <task_led_update>:
    }

}

static void task_led_update(void* parameters)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        UpdateLEDs(ax, ay, az);
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <task_led_update+0x34>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <task_led_update+0x38>)
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <task_led_update+0x3c>)
 800101a:	edd3 6a00 	vldr	s13, [r3]
 800101e:	eeb0 1a66 	vmov.f32	s2, s13
 8001022:	eef0 0a47 	vmov.f32	s1, s14
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	f7ff ff67 	bl	8000efc <UpdateLEDs>
        vTaskDelay(pdMS_TO_TICKS(50));  // 50ms delay
 800102e:	2032      	movs	r0, #50	@ 0x32
 8001030:	f003 f9a6 	bl	8004380 <vTaskDelay>
        UpdateLEDs(ax, ay, az);
 8001034:	bf00      	nop
 8001036:	e7e9      	b.n	800100c <task_led_update+0x8>
 8001038:	20000084 	.word	0x20000084
 800103c:	20000088 	.word	0x20000088
 8001040:	2000008c 	.word	0x2000008c

08001044 <SystemClock_Config>:
    }
}


void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fe42 	bl	8005cdc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <SystemClock_Config+0xb4>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <SystemClock_Config+0xb4>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <SystemClock_Config+0xb4>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <SystemClock_Config+0xb8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <SystemClock_Config+0xb8>)
 800108e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <SystemClock_Config+0xb8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]



    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fd57 	bl	8002b68 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x80>
    {
        Error_Handler();
 80010c0:	f000 f8c2 	bl	8001248 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 ffba 	bl	8003058 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xaa>




    {
        Error_Handler();
 80010ea:	f000 f8ad 	bl	8001248 <Error_Handler>


    }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	@ 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_GPIO_Init+0x94>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <MX_GPIO_Init+0x94>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_GPIO_Init+0x94>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MX_GPIO_Init+0x94>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <MX_GPIO_Init+0x94>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MX_GPIO_Init+0x94>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]



    // LED pins config
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800114e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	480c      	ldr	r0, [pc, #48]	@ (8001198 <MX_GPIO_Init+0x98>)
 8001168:	f000 fb0a 	bl	8001780 <HAL_GPIO_Init>

    // I2C pins config
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800116c:	23c0      	movs	r3, #192	@ 0xc0
 800116e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001174:	2301      	movs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117c:	2304      	movs	r3, #4
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_GPIO_Init+0x9c>)
 8001188:	f000 fafa 	bl	8001780 <HAL_GPIO_Init>
}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40020400 	.word	0x40020400

080011a0 <I2C_Config>:

static void I2C_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <I2C_Config+0x74>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <I2C_Config+0x74>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <I2C_Config+0x74>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <I2C_Config+0x78>)
 80011c4:	4a15      	ldr	r2, [pc, #84]	@ (800121c <I2C_Config+0x7c>)
 80011c6:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <I2C_Config+0x78>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <I2C_Config+0x80>)
 80011cc:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <I2C_Config+0x78>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80011d4:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <I2C_Config+0x78>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <I2C_Config+0x78>)
 80011dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e0:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <I2C_Config+0x78>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <I2C_Config+0x78>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <I2C_Config+0x78>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <I2C_Config+0x78>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <I2C_Config+0x78>)
 80011fc:	f000 fc90 	bl	8001b20 <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <I2C_Config+0x6a>
    {
        Error_Handler();
 8001206:	f000 f81f 	bl	8001248 <Error_Handler>
    }
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	20000030 	.word	0x20000030
 800121c:	40005400 	.word	0x40005400
 8001220:	000186a0 	.word	0x000186a0

08001224 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]


    if (htim->Instance == TIM5) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8001236:	f000 f97d 	bl	8001534 <HAL_IncTick>
    }


}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40000c00 	.word	0x40000c00

08001248 <Error_Handler>:

void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
    __disable_irq();
    while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <Error_Handler+0x8>

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001268:	6453      	str	r3, [r2, #68]	@ 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <HAL_I2C_MspInit+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12b      	bne.n	800131e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_I2C_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a17      	ldr	r2, [pc, #92]	@ (800132c <HAL_I2C_MspInit+0x88>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_I2C_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e2:	23c0      	movs	r3, #192	@ 0xc0
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e6:	2312      	movs	r3, #18
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f2:	2304      	movs	r3, #4
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	@ (8001330 <HAL_I2C_MspInit+0x8c>)
 80012fe:	f000 fa3f 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_I2C_MspInit+0x88>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_I2C_MspInit+0x88>)
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_I2C_MspInit+0x88>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40005400 	.word	0x40005400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020400 	.word	0x40020400

08001334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <HAL_InitTick+0xe4>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	4a32      	ldr	r2, [pc, #200]	@ (8001418 <HAL_InitTick+0xe4>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6413      	str	r3, [r2, #64]	@ 0x40
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <HAL_InitTick+0xe4>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001360:	f107 0210 	add.w	r2, r7, #16
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f840 	bl	80033f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137a:	f002 f825 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 800137e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001380:	e004      	b.n	800138c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001382:	f002 f821 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8001386:	4603      	mov	r3, r0
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800138c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138e:	4a23      	ldr	r2, [pc, #140]	@ (800141c <HAL_InitTick+0xe8>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	3b01      	subs	r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <HAL_InitTick+0xec>)
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <HAL_InitTick+0xf0>)
 800139e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <HAL_InitTick+0xec>)
 80013a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013a6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80013a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001420 <HAL_InitTick+0xec>)
 80013aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ac:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <HAL_InitTick+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_InitTick+0xec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_InitTick+0xec>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80013c0:	4817      	ldr	r0, [pc, #92]	@ (8001420 <HAL_InitTick+0xec>)
 80013c2:	f002 f847 	bl	8003454 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11b      	bne.n	800140c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80013d4:	4812      	ldr	r0, [pc, #72]	@ (8001420 <HAL_InitTick+0xec>)
 80013d6:	f002 f897 	bl	8003508 <HAL_TIM_Base_Start_IT>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d111      	bne.n	800140c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013e8:	2032      	movs	r0, #50	@ 0x32
 80013ea:	f000 f9bb 	bl	8001764 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d808      	bhi.n	8001406 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2032      	movs	r0, #50	@ 0x32
 80013fa:	f000 f997 	bl	800172c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <HAL_InitTick+0xf4>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e002      	b.n	800140c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800140c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001410:	4618      	mov	r0, r3
 8001412:	3738      	adds	r7, #56	@ 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	431bde83 	.word	0x431bde83
 8001420:	20000090 	.word	0x20000090
 8001424:	40000c00 	.word	0x40000c00
 8001428:	20000004 	.word	0x20000004

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <MemManage_Handler+0x4>

08001444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <UsageFault_Handler+0x4>

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <TIM5_IRQHandler+0x10>)
 800146a:	f002 f8bd 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000090 	.word	0x20000090

08001478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014a0:	f7ff ffea 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f004 fc0f 	bl	8005cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff fc15 	bl	8000cfc <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80014e0:	08005dc4 	.word	0x08005dc4
  ldr r2, =_sbss
 80014e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014e8:	2000fa80 	.word	0x2000fa80

080014ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <HAL_Init+0x40>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <HAL_Init+0x40>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_Init+0x40>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 f8fc 	bl	8001716 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	200f      	movs	r0, #15
 8001520:	f7ff ff08 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fe96 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	200000d8 	.word	0x200000d8

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	200000d8 	.word	0x200000d8

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	@ (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	@ (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff4c 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173e:	f7ff ff61 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001742:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	6978      	ldr	r0, [r7, #20]
 800174a:	f7ff ffb1 	bl	80016b0 <NVIC_EncodePriority>
 800174e:	4602      	mov	r2, r0
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff80 	bl	800165c <__NVIC_SetPriority>
}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff54 	bl	8001620 <__NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e16b      	b.n	8001a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 815a 	bne.w	8001a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d130      	bne.n	8001834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 0201 	and.w	r2, r3, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b03      	cmp	r3, #3
 800183e:	d017      	beq.n	8001870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80b4 	beq.w	8001a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <HAL_GPIO_Init+0x30c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	4a5f      	ldr	r2, [pc, #380]	@ (8001a8c <HAL_GPIO_Init+0x30c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001914:	6453      	str	r3, [r2, #68]	@ 0x44
 8001916:	4b5d      	ldr	r3, [pc, #372]	@ (8001a8c <HAL_GPIO_Init+0x30c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a5b      	ldr	r2, [pc, #364]	@ (8001a90 <HAL_GPIO_Init+0x310>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	@ (8001a94 <HAL_GPIO_Init+0x314>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a51      	ldr	r2, [pc, #324]	@ (8001a98 <HAL_GPIO_Init+0x318>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <HAL_GPIO_Init+0x31c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <HAL_GPIO_Init+0x320>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	@ (8001aa4 <HAL_GPIO_Init+0x324>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa8 <HAL_GPIO_Init+0x328>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	@ (8001aac <HAL_GPIO_Init+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <HAL_GPIO_Init+0x330>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20a>
 8001986:	2307      	movs	r3, #7
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198a:	2308      	movs	r3, #8
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4935      	ldr	r1, [pc, #212]	@ (8001a90 <HAL_GPIO_Init+0x310>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ea:	4a32      	ldr	r2, [pc, #200]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f0:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a14:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a68:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae90 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3724      	adds	r7, #36	@ 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40021400 	.word	0x40021400
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e12b      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fbac 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	@ 0x24
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b84:	f001 fc20 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a81      	ldr	r2, [pc, #516]	@ (8001d94 <HAL_I2C_Init+0x274>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d807      	bhi.n	8001ba4 <HAL_I2C_Init+0x84>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a80      	ldr	r2, [pc, #512]	@ (8001d98 <HAL_I2C_Init+0x278>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e006      	b.n	8001bb2 <HAL_I2C_Init+0x92>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8001d9c <HAL_I2C_Init+0x27c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0e7      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	@ (8001da0 <HAL_I2C_Init+0x280>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d94 <HAL_I2C_Init+0x274>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d802      	bhi.n	8001bf4 <HAL_I2C_Init+0xd4>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	e009      	b.n	8001c08 <HAL_I2C_Init+0xe8>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a69      	ldr	r2, [pc, #420]	@ (8001da4 <HAL_I2C_Init+0x284>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3301      	adds	r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	495c      	ldr	r1, [pc, #368]	@ (8001d94 <HAL_I2C_Init+0x274>)
 8001c24:	428b      	cmp	r3, r1
 8001c26:	d819      	bhi.n	8001c5c <HAL_I2C_Init+0x13c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e59      	subs	r1, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_I2C_Init+0x138>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1e59      	subs	r1, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	e051      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x168>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x18e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x196>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	817b      	strh	r3, [r7, #10]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	813b      	strh	r3, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff fbcb 	bl	800155c <HAL_GetTick>
 8001dc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	f040 80d9 	bne.w	8001f88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2319      	movs	r3, #25
 8001ddc:	2201      	movs	r2, #1
 8001dde:	496d      	ldr	r1, [pc, #436]	@ (8001f94 <HAL_I2C_Mem_Write+0x1ec>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fc8b 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0cc      	b.n	8001f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_I2C_Mem_Write+0x56>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e0c5      	b.n	8001f8a <HAL_I2C_Mem_Write+0x1e2>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d007      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2221      	movs	r2, #33	@ 0x21
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a3a      	ldr	r2, [r7, #32]
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a4d      	ldr	r2, [pc, #308]	@ (8001f98 <HAL_I2C_Mem_Write+0x1f0>)
 8001e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e66:	88f8      	ldrh	r0, [r7, #6]
 8001e68:	893a      	ldrh	r2, [r7, #8]
 8001e6a:	8979      	ldrh	r1, [r7, #10]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4603      	mov	r3, r0
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fac2 	bl	8002400 <I2C_RequestMemoryWrite>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d052      	beq.n	8001f28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e081      	b.n	8001f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fd50 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d107      	bne.n	8001eae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e06b      	b.n	8001f8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d11b      	bne.n	8001f28 <HAL_I2C_Mem_Write+0x180>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d017      	beq.n	8001f28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1aa      	bne.n	8001e86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fd43 	bl	80029c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e016      	b.n	8001f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
  }
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	00100002 	.word	0x00100002
 8001f98:	ffff0000 	.word	0xffff0000

08001f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	@ 0x30
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	817b      	strh	r3, [r7, #10]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	813b      	strh	r3, [r7, #8]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb6:	f7ff fad1 	bl	800155c <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	f040 8214 	bne.w	80023f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2319      	movs	r3, #25
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	497b      	ldr	r1, [pc, #492]	@ (80021c0 <HAL_I2C_Mem_Read+0x224>)
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb91 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e207      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Mem_Read+0x56>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e200      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d007      	beq.n	8002018 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2222      	movs	r2, #34	@ 0x22
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2240      	movs	r2, #64	@ 0x40
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002048:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a5b      	ldr	r2, [pc, #364]	@ (80021c4 <HAL_I2C_Mem_Read+0x228>)
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800205a:	88f8      	ldrh	r0, [r7, #6]
 800205c:	893a      	ldrh	r2, [r7, #8]
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4603      	mov	r3, r0
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fa5e 	bl	800252c <I2C_RequestMemoryRead>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1bc      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	d113      	bne.n	80020aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e190      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d11b      	bne.n	80020ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e170      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11b      	bne.n	800212a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002100:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	e150      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002140:	e144      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002146:	2b03      	cmp	r3, #3
 8002148:	f200 80f1 	bhi.w	800232e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002150:	2b01      	cmp	r3, #1
 8002152:	d123      	bne.n	800219c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fc79 	bl	8002a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e145      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800219a:	e117      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d14e      	bne.n	8002242 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021aa:	2200      	movs	r2, #0
 80021ac:	4906      	ldr	r1, [pc, #24]	@ (80021c8 <HAL_I2C_Mem_Read+0x22c>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 faa4 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e11a      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000
 80021c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002240:	e0c4      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002248:	2200      	movs	r2, #0
 800224a:	496c      	ldr	r1, [pc, #432]	@ (80023fc <HAL_I2C_Mem_Read+0x460>)
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fa55 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cb      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800226a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	2200      	movs	r2, #0
 80022a6:	4955      	ldr	r1, [pc, #340]	@ (80023fc <HAL_I2C_Mem_Read+0x460>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa27 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e09d      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800232c:	e04e      	b.n	80023cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fb8c 	bl	8002a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e058      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d124      	bne.n	80023cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	2b03      	cmp	r3, #3
 8002388:	d107      	bne.n	800239a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002398:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f47f aeb6 	bne.w	8002142 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3728      	adds	r7, #40	@ 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	00010004 	.word	0x00010004

08002400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	817b      	strh	r3, [r7, #10]
 8002412:	460b      	mov	r3, r1
 8002414:	813b      	strh	r3, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2200      	movs	r2, #0
 8002432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f960 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002450:	d103      	bne.n	800245a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e05f      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800246c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	492d      	ldr	r1, [pc, #180]	@ (8002528 <I2C_RequestMemoryWrite+0x128>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f9bb 	bl	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e04c      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa46 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d107      	bne.n	80024c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e02b      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024cc:	893b      	ldrh	r3, [r7, #8]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	611a      	str	r2, [r3, #16]
 80024d6:	e021      	b.n	800251c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024d8:	893b      	ldrh	r3, [r7, #8]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	6a39      	ldr	r1, [r7, #32]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa20 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d107      	bne.n	800250e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e005      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002512:	893b      	ldrh	r3, [r7, #8]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002554:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002564:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	2200      	movs	r2, #0
 800256e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f8c2 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258c:	d103      	bne.n	8002596 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0aa      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	4952      	ldr	r1, [pc, #328]	@ (80026f8 <I2C_RequestMemoryRead+0x1cc>)
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f91d 	bl	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e097      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d8:	6a39      	ldr	r1, [r7, #32]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9a8 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d107      	bne.n	80025fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e076      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002608:	893b      	ldrh	r3, [r7, #8]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	e021      	b.n	8002658 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002614:	893b      	ldrh	r3, [r7, #8]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	b29b      	uxth	r3, r3
 800261a:	b2da      	uxtb	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002624:	6a39      	ldr	r1, [r7, #32]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f982 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b04      	cmp	r3, #4
 8002638:	d107      	bne.n	800264a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e050      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800264e:	893b      	ldrh	r3, [r7, #8]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265a:	6a39      	ldr	r1, [r7, #32]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f967 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00d      	beq.n	8002684 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	2b04      	cmp	r3, #4
 800266e:	d107      	bne.n	8002680 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e035      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002692:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2200      	movs	r2, #0
 800269c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f82b 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ba:	d103      	bne.n	80026c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e013      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026c8:	897b      	ldrh	r3, [r7, #10]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	6a3a      	ldr	r2, [r7, #32]
 80026dc:	4906      	ldr	r1, [pc, #24]	@ (80026f8 <I2C_RequestMemoryRead+0x1cc>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f886 	bl	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	00010002 	.word	0x00010002

080026fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270c:	e048      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d044      	beq.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002716:	f7fe ff21 	bl	800155c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d139      	bne.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10d      	bne.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	43da      	mvns	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4013      	ands	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	e00c      	b.n	800276c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	43da      	mvns	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	429a      	cmp	r2, r3
 8002770:	d116      	bne.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e023      	b.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10d      	bne.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	e00c      	b.n	80027e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d093      	beq.n	800270e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027fe:	e071      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280e:	d123      	bne.n	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f043 0204 	orr.w	r2, r3, #4
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e067      	b.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d041      	beq.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe fe7c 	bl	800155c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d136      	bne.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10c      	bne.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4013      	ands	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf14      	ite	ne
 8002892:	2301      	movne	r3, #1
 8002894:	2300      	moveq	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	e00b      	b.n	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e021      	b.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10c      	bne.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	43da      	mvns	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4013      	ands	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e00b      	b.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	f47f af6d 	bne.w	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293c:	e034      	b.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f8e3 	bl	8002b0a <I2C_IsAcknowledgeFailed>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e034      	b.n	80029b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d028      	beq.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fe01 	bl	800155c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d11d      	bne.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002976:	2b80      	cmp	r3, #128	@ 0x80
 8002978:	d016      	beq.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b2:	2b80      	cmp	r3, #128	@ 0x80
 80029b4:	d1c3      	bne.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029cc:	e034      	b.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f89b 	bl	8002b0a <I2C_IsAcknowledgeFailed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e034      	b.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d028      	beq.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7fe fdb9 	bl	800155c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11d      	bne.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d016      	beq.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d1c3      	bne.n	80029ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a5c:	e049      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d119      	bne.n	8002aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0210 	mvn.w	r2, #16
 8002a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e030      	b.n	8002b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fd5c 	bl	800155c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11d      	bne.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d016      	beq.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f043 0220 	orr.w	r2, r3, #32
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b40      	cmp	r3, #64	@ 0x40
 8002afe:	d1ae      	bne.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b20:	d11b      	bne.n	8002b5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e267      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	4b88      	ldr	r3, [pc, #544]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00c      	beq.n	8002bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b85      	ldr	r3, [pc, #532]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d112      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b82      	ldr	r3, [pc, #520]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b7e      	ldr	r3, [pc, #504]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e242      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x74>
 8002bce:	4b76      	ldr	r3, [pc, #472]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x98>
 8002be6:	4b70      	ldr	r3, [pc, #448]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6f      	ldr	r2, [pc, #444]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002c00:	4b69      	ldr	r3, [pc, #420]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a68      	ldr	r2, [pc, #416]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b66      	ldr	r3, [pc, #408]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a65      	ldr	r2, [pc, #404]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fc9c 	bl	800155c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe fc98 	bl	800155c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e207      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fc88 	bl	800155c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fc84 	bl	800155c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1f3      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	4b51      	ldr	r3, [pc, #324]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b44      	ldr	r3, [pc, #272]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1c7      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b3b      	ldr	r3, [pc, #236]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4937      	ldr	r1, [pc, #220]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e03a      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <HAL_RCC_OscConfig+0x244>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fc3d 	bl	800155c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fc39 	bl	800155c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1a8      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4925      	ldr	r1, [pc, #148]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCC_OscConfig+0x244>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fc1c 	bl	800155c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d28:	f7fe fc18 	bl	800155c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e187      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d036      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <HAL_RCC_OscConfig+0x248>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fbfc 	bl	800155c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fbf8 	bl	800155c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e167      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x200>
 8002d86:	e01b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <HAL_RCC_OscConfig+0x248>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fbe5 	bl	800155c <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e00e      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe fbe1 	bl	800155c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d907      	bls.n	8002db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e150      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	42470000 	.word	0x42470000
 8002db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b88      	ldr	r3, [pc, #544]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ea      	bne.n	8002d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8097 	beq.w	8002efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b81      	ldr	r3, [pc, #516]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b7d      	ldr	r3, [pc, #500]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	4a7c      	ldr	r2, [pc, #496]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dee:	4b7a      	ldr	r3, [pc, #488]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b77      	ldr	r3, [pc, #476]	@ (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0a:	4b74      	ldr	r3, [pc, #464]	@ (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a73      	ldr	r2, [pc, #460]	@ (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fba1 	bl	800155c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7fe fb9d 	bl	800155c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e10c      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2ea>
 8002e44:	4b64      	ldr	r3, [pc, #400]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	4a63      	ldr	r2, [pc, #396]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e50:	e01c      	b.n	8002e8c <HAL_RCC_OscConfig+0x324>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x30c>
 8002e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e66:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0x324>
 8002e74:	4b58      	ldr	r3, [pc, #352]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	4a57      	ldr	r2, [pc, #348]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e80:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	4a54      	ldr	r2, [pc, #336]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 0304 	bic.w	r3, r3, #4
 8002e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d015      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fb62 	bl	800155c <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fb5e 	bl	800155c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0cb      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	4b49      	ldr	r3, [pc, #292]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ee      	beq.n	8002e9c <HAL_RCC_OscConfig+0x334>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fb4c 	bl	800155c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fb48 	bl	800155c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0b5      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ee      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef0:	4b39      	ldr	r3, [pc, #228]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	4a38      	ldr	r2, [pc, #224]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80a1 	beq.w	8003048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f06:	4b34      	ldr	r3, [pc, #208]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d05c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d141      	bne.n	8002f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b31      	ldr	r3, [pc, #196]	@ (8002fe0 <HAL_RCC_OscConfig+0x478>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fb1c 	bl	800155c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fe fb18 	bl	800155c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e087      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	491b      	ldr	r1, [pc, #108]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <HAL_RCC_OscConfig+0x478>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe faf1 	bl	800155c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe faed 	bl	800155c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e05c      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f90:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x416>
 8002f9c:	e054      	b.n	8003048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b10      	ldr	r3, [pc, #64]	@ (8002fe0 <HAL_RCC_OscConfig+0x478>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fada 	bl	800155c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fad6 	bl	800155c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e045      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x444>
 8002fca:	e03d      	b.n	8003048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e038      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d028      	beq.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d121      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800301a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301c:	4293      	cmp	r3, r2
 800301e:	d111      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0cc      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b65      	ldr	r3, [pc, #404]	@ (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	@ (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a58      	ldr	r2, [pc, #352]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a52      	ldr	r2, [pc, #328]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b3f      	ldr	r3, [pc, #252]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e067      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b37      	ldr	r3, [pc, #220]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4934      	ldr	r1, [pc, #208]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7fe fa08 	bl	800155c <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fe fa04 	bl	800155c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b25      	ldr	r3, [pc, #148]	@ (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20c      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	490a      	ldr	r1, [pc, #40]	@ (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	@ (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe f898 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	08005d9c 	.word	0x08005d9c
 800321c:	20000000 	.word	0x20000000
 8003220:	20000004 	.word	0x20000004

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003228:	b090      	sub	sp, #64	@ 0x40
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	2300      	movs	r3, #0
 8003232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003234:	2300      	movs	r3, #0
 8003236:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323c:	4b59      	ldr	r3, [pc, #356]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d00d      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 8003248:	2b08      	cmp	r3, #8
 800324a:	f200 80a1 	bhi.w	8003390 <HAL_RCC_GetSysClockFreq+0x16c>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x34>
 8003252:	2b04      	cmp	r3, #4
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x3a>
 8003256:	e09b      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800325c:	e09b      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325e:	4b53      	ldr	r3, [pc, #332]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003260:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003262:	e098      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003264:	4b4f      	ldr	r3, [pc, #316]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326e:	4b4d      	ldr	r3, [pc, #308]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b4a      	ldr	r3, [pc, #296]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	2200      	movs	r2, #0
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	627a      	str	r2, [r7, #36]	@ 0x24
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800328c:	2100      	movs	r1, #0
 800328e:	4b47      	ldr	r3, [pc, #284]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003290:	fb03 f201 	mul.w	r2, r3, r1
 8003294:	2300      	movs	r3, #0
 8003296:	fb00 f303 	mul.w	r3, r0, r3
 800329a:	4413      	add	r3, r2
 800329c:	4a43      	ldr	r2, [pc, #268]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x188>)
 800329e:	fba0 1202 	umull	r1, r2, r0, r2
 80032a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032a4:	460a      	mov	r2, r1
 80032a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032aa:	4413      	add	r3, r2
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b0:	2200      	movs	r2, #0
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	61fa      	str	r2, [r7, #28]
 80032b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032be:	f7fd fba5 	bl	8000a0c <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4613      	mov	r3, r2
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ca:	e053      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032cc:	4b35      	ldr	r3, [pc, #212]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	2200      	movs	r2, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	617a      	str	r2, [r7, #20]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032de:	f04f 0b00 	mov.w	fp, #0
 80032e2:	4652      	mov	r2, sl
 80032e4:	465b      	mov	r3, fp
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	ebb2 080a 	subs.w	r8, r2, sl
 80032fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800330e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003312:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003316:	ebb2 0408 	subs.w	r4, r2, r8
 800331a:	eb63 0509 	sbc.w	r5, r3, r9
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	00eb      	lsls	r3, r5, #3
 8003328:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332c:	00e2      	lsls	r2, r4, #3
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	eb14 030a 	adds.w	r3, r4, sl
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	eb45 030b 	adc.w	r3, r5, fp
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800334a:	4629      	mov	r1, r5
 800334c:	028b      	lsls	r3, r1, #10
 800334e:	4621      	mov	r1, r4
 8003350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003354:	4621      	mov	r1, r4
 8003356:	028a      	lsls	r2, r1, #10
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335e:	2200      	movs	r2, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003368:	f7fd fb50 	bl	8000a0c <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4613      	mov	r3, r2
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003392:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003398:	4618      	mov	r0, r3
 800339a:	3740      	adds	r7, #64	@ 0x40
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	017d7840 	.word	0x017d7840

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033cc:	f7ff fff0 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a9b      	lsrs	r3, r3, #10
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	@ (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08005dac 	.word	0x08005dac

080033f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	220f      	movs	r2, #15
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003400:	4b12      	ldr	r3, [pc, #72]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <HAL_RCC_GetClockConfig+0x60>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40023c00 	.word	0x40023c00

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e041      	b.n	80034ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f839 	bl	80034f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 f9c0 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e04e      	b.n	80035be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a23      	ldr	r2, [pc, #140]	@ (80035cc <HAL_TIM_Base_Start_IT+0xc4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d022      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354a:	d01d      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1f      	ldr	r2, [pc, #124]	@ (80035d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1e      	ldr	r2, [pc, #120]	@ (80035d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x80>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d010      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	e007      	b.n	80035bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40010400 	.word	0x40010400
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40001800 	.word	0x40001800

080035e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d020      	beq.n	800364c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8d2 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8c4 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8d5 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d020      	beq.n	8003698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0204 	mvn.w	r2, #4
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8ac 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f89e 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8af 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d020      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01b      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0208 	mvn.w	r2, #8
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f886 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f878 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f889 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d020      	beq.n	8003730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0210 	mvn.w	r2, #16
 8003700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2208      	movs	r2, #8
 8003706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f860 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f852 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f863 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0201 	mvn.w	r2, #1
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fd68 	bl	8001224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f906 	bl	8003984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f834 	bl	8003804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00c      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0220 	mvn.w	r2, #32
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8d8 	bl	8003970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a46      	ldr	r2, [pc, #280]	@ (8003944 <TIM_Base_SetConfig+0x12c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a43      	ldr	r2, [pc, #268]	@ (8003948 <TIM_Base_SetConfig+0x130>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a42      	ldr	r2, [pc, #264]	@ (800394c <TIM_Base_SetConfig+0x134>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a41      	ldr	r2, [pc, #260]	@ (8003950 <TIM_Base_SetConfig+0x138>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a40      	ldr	r2, [pc, #256]	@ (8003954 <TIM_Base_SetConfig+0x13c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a35      	ldr	r2, [pc, #212]	@ (8003944 <TIM_Base_SetConfig+0x12c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003878:	d027      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a32      	ldr	r2, [pc, #200]	@ (8003948 <TIM_Base_SetConfig+0x130>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d023      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a31      	ldr	r2, [pc, #196]	@ (800394c <TIM_Base_SetConfig+0x134>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a30      	ldr	r2, [pc, #192]	@ (8003950 <TIM_Base_SetConfig+0x138>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2f      	ldr	r2, [pc, #188]	@ (8003954 <TIM_Base_SetConfig+0x13c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d017      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <TIM_Base_SetConfig+0x140>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2d      	ldr	r2, [pc, #180]	@ (800395c <TIM_Base_SetConfig+0x144>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003960 <TIM_Base_SetConfig+0x148>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003964 <TIM_Base_SetConfig+0x14c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003968 <TIM_Base_SetConfig+0x150>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a29      	ldr	r2, [pc, #164]	@ (800396c <TIM_Base_SetConfig+0x154>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a10      	ldr	r2, [pc, #64]	@ (8003944 <TIM_Base_SetConfig+0x12c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a12      	ldr	r2, [pc, #72]	@ (8003954 <TIM_Base_SetConfig+0x13c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d103      	bne.n	8003918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]
  }
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	40001800 	.word	0x40001800
 8003968:	40001c00 	.word	0x40001c00
 800396c:	40002000 	.word	0x40002000

08003970 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f103 0208 	add.w	r2, r3, #8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f103 0208 	add.w	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f103 0208 	add.w	r2, r3, #8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d103      	bne.n	8003a12 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e00c      	b.n	8003a2c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3308      	adds	r3, #8
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <vListInsert+0x2e>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d2f6      	bcs.n	8003a1a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6852      	ldr	r2, [r2, #4]
 8003a84:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d103      	bne.n	8003a98 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1e5a      	subs	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d05d      	beq.n	8003baa <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d059      	beq.n	8003baa <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afe:	2100      	movs	r1, #0
 8003b00:	fba3 2302 	umull	r2, r3, r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d000      	beq.n	8003b0a <xQueueGenericReset+0x52>
 8003b08:	2101      	movs	r1, #1
 8003b0a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d14c      	bne.n	8003baa <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8003b10:	f001 fe2c 	bl	800576c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	6939      	ldr	r1, [r7, #16]
 8003b1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	441a      	add	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	3b01      	subs	r3, #1
 8003b42:	6939      	ldr	r1, [r7, #16]
 8003b44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	441a      	add	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	22ff      	movs	r2, #255	@ 0xff
 8003b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	22ff      	movs	r2, #255	@ 0xff
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d114      	bne.n	8003b90 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01a      	beq.n	8003ba4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3310      	adds	r3, #16
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff86 	bl	8004a84 <xTaskRemoveFromEventList>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b7e:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <xQueueGenericReset+0x120>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	e009      	b.n	8003ba4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3310      	adds	r3, #16
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff feff 	bl	8003998 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3324      	adds	r3, #36	@ 0x24
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fefa 	bl	8003998 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003ba4:	f001 fe14 	bl	80057d0 <vPortExitCritical>
 8003ba8:	e001      	b.n	8003bae <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <xQueueGenericReset+0x114>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	60bb      	str	r3, [r7, #8]
    }
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02e      	beq.n	8003c52 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d000      	beq.n	8003c04 <xQueueGenericCreate+0x28>
 8003c02:	2101      	movs	r1, #1
 8003c04:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d123      	bne.n	8003c52 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003c12:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003c16:	d81c      	bhi.n	8003c52 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3350      	adds	r3, #80	@ 0x50
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fe88 	bl	800593c <pvPortMalloc>
 8003c2c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01d      	beq.n	8003c70 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3350      	adds	r3, #80	@ 0x50
 8003c3c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c3e:	79fa      	ldrb	r2, [r7, #7]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f815 	bl	8003c7a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003c50:	e00e      	b.n	8003c70 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <xQueueGenericCreate+0x94>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	613b      	str	r3, [r7, #16]
    }
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003c70:	69fb      	ldr	r3, [r7, #28]
    }
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e002      	b.n	8003c9c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ca8:	2101      	movs	r1, #1
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f7ff ff04 	bl	8003ab8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	@ 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <xQueueReceive+0x32>
        __asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	623b      	str	r3, [r7, #32]
    }
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	e7fd      	b.n	8003cee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <xQueueReceive+0x40>
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <xQueueReceive+0x44>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <xQueueReceive+0x46>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <xQueueReceive+0x62>
        __asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	61fb      	str	r3, [r7, #28]
    }
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d22:	f001 f8c3 	bl	8004eac <xTaskGetSchedulerState>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <xQueueReceive+0x72>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <xQueueReceive+0x76>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <xQueueReceive+0x78>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <xQueueReceive+0x94>
        __asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	61bb      	str	r3, [r7, #24]
    }
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d54:	f001 fd0a 	bl	800576c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01f      	beq.n	8003da4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d68:	f000 f88c 	bl	8003e84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00f      	beq.n	8003d9c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	3310      	adds	r3, #16
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fe7f 	bl	8004a84 <xTaskRemoveFromEventList>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e80 <xQueueReceive+0x1c0>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d9c:	f001 fd18 	bl	80057d0 <vPortExitCritical>
                return pdPASS;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e069      	b.n	8003e78 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003daa:	f001 fd11 	bl	80057d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e062      	b.n	8003e78 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003db8:	f107 0310 	add.w	r3, r7, #16
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 ff39 	bl	8004c34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003dc6:	f001 fd03 	bl	80057d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003dca:	f000 fb61 	bl	8004490 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003dce:	f001 fccd 	bl	800576c <vPortEnterCritical>
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d103      	bne.n	8003de8 <xQueueReceive+0x128>
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d103      	bne.n	8003dfe <xQueueReceive+0x13e>
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dfe:	f001 fce7 	bl	80057d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e02:	1d3a      	adds	r2, r7, #4
 8003e04:	f107 0310 	add.w	r3, r7, #16
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 ff28 	bl	8004c60 <xTaskCheckForTimeOut>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d123      	bne.n	8003e5e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e18:	f000 f8ac 	bl	8003f74 <prvIsQueueEmpty>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	3324      	adds	r3, #36	@ 0x24
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fdbe 	bl	80049ac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e32:	f000 f84d 	bl	8003ed0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e36:	f000 fb39 	bl	80044ac <xTaskResumeAll>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d189      	bne.n	8003d54 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003e40:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <xQueueReceive+0x1c0>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e780      	b.n	8003d54 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e54:	f000 f83c 	bl	8003ed0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e58:	f000 fb28 	bl	80044ac <xTaskResumeAll>
 8003e5c:	e77a      	b.n	8003d54 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e60:	f000 f836 	bl	8003ed0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e64:	f000 fb22 	bl	80044ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e6a:	f000 f883 	bl	8003f74 <prvIsQueueEmpty>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f43f af6f 	beq.w	8003d54 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003e76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3730      	adds	r7, #48	@ 0x30
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d303      	bcc.n	8003eb8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68d9      	ldr	r1, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6838      	ldr	r0, [r7, #0]
 8003ec4:	f001 ff36 	bl	8005d34 <memcpy>
    }
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003ed8:	f001 fc48 	bl	800576c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ee2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee4:	e011      	b.n	8003f0a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	@ 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fdc6 	bl	8004a84 <xTaskRemoveFromEventList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003efe:	f000 ff17 	bl	8004d30 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dce9      	bgt.n	8003ee6 <prvUnlockQueue+0x16>
 8003f12:	e000      	b.n	8003f16 <prvUnlockQueue+0x46>
                    break;
 8003f14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	22ff      	movs	r2, #255	@ 0xff
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003f1e:	f001 fc57 	bl	80057d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003f22:	f001 fc23 	bl	800576c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f2e:	e011      	b.n	8003f54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fda1 	bl	8004a84 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003f48:	f000 fef2 	bl	8004d30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	dce9      	bgt.n	8003f30 <prvUnlockQueue+0x60>
 8003f5c:	e000      	b.n	8003f60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003f5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	22ff      	movs	r2, #255	@ 0xff
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003f68:	f001 fc32 	bl	80057d0 <vPortExitCritical>
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f7c:	f001 fbf6 	bl	800576c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e001      	b.n	8003f92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f92:	f001 fc1d 	bl	80057d0 <vPortExitCritical>

    return xReturn;
 8003f96:	68fb      	ldr	r3, [r7, #12]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <vQueueAddToRegistry+0x2c>
        __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60fb      	str	r3, [r7, #12]
    }
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d024      	beq.n	800401c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e01e      	b.n	8004016 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003fd8:	4a18      	ldr	r2, [pc, #96]	@ (800403c <vQueueAddToRegistry+0x9c>)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d105      	bne.n	8003ff4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4a13      	ldr	r2, [pc, #76]	@ (800403c <vQueueAddToRegistry+0x9c>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
                    break;
 8003ff2:	e013      	b.n	800401c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <vQueueAddToRegistry+0x70>
 8003ffa:	4a10      	ldr	r2, [pc, #64]	@ (800403c <vQueueAddToRegistry+0x9c>)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <vQueueAddToRegistry+0x9c>)
 800400c:	4413      	add	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3301      	adds	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b07      	cmp	r3, #7
 800401a:	d9dd      	bls.n	8003fd8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200000dc 	.word	0x200000dc

08004040 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004050:	f001 fb8c 	bl	800576c <vPortEnterCritical>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800405a:	b25b      	sxtb	r3, r3
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d103      	bne.n	800406a <vQueueWaitForMessageRestricted+0x2a>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d103      	bne.n	8004080 <vQueueWaitForMessageRestricted+0x40>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004080:	f001 fba6 	bl	80057d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3324      	adds	r3, #36	@ 0x24
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fcaf 	bl	80049f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff ff18 	bl	8003ed0 <prvUnlockQueue>
    }
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	@ 0x30
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fc3d 	bl	800593c <pvPortMalloc>
 80040c2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d013      	beq.n	80040f2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040ca:	2058      	movs	r0, #88	@ 0x58
 80040cc:	f001 fc36 	bl	800593c <pvPortMalloc>
 80040d0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80040d8:	2258      	movs	r2, #88	@ 0x58
 80040da:	2100      	movs	r1, #0
 80040dc:	69f8      	ldr	r0, [r7, #28]
 80040de:	f001 fdfd 	bl	8005cdc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80040e8:	e005      	b.n	80040f6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f001 fce2 	bl	8005ab4 <vPortFree>
 80040f0:	e001      	b.n	80040f6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	2300      	movs	r3, #0
 8004100:	9303      	str	r3, [sp, #12]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f80e 	bl	8004134 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004118:	69f8      	ldr	r0, [r7, #28]
 800411a:	f000 f89b 	bl	8004254 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800411e:	2301      	movs	r3, #1
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	e002      	b.n	800412a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800412a:	69bb      	ldr	r3, [r7, #24]
    }
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	461a      	mov	r2, r3
 800414c:	21a5      	movs	r1, #165	@ 0xa5
 800414e:	f001 fdc5 	bl	8005cdc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800415c:	3b01      	subs	r3, #1
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f023 0307 	bic.w	r3, r3, #7
 800416a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	617b      	str	r3, [r7, #20]
    }
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01e      	beq.n	80041d2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e012      	b.n	80041c0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	7819      	ldrb	r1, [r3, #0]
 80041a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	3334      	adds	r3, #52	@ 0x34
 80041aa:	460a      	mov	r2, r1
 80041ac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b09      	cmp	r3, #9
 80041c4:	d9e9      	bls.n	800419a <prvInitialiseNewTask+0x66>
 80041c6:	e000      	b.n	80041ca <prvInitialiseNewTask+0x96>
            {
                break;
 80041c8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d90b      	bls.n	80041f0 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	613b      	str	r3, [r7, #16]
    }
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d901      	bls.n	80041fa <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041f6:	2304      	movs	r3, #4
 80041f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004204:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004208:	3304      	adds	r3, #4
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fbe4 	bl	80039d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	3318      	adds	r3, #24
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fbdf 	bl	80039d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800421e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	f1c3 0205 	rsb	r2, r3, #5
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	69b8      	ldr	r0, [r7, #24]
 8004236:	f001 f963 	bl	8005500 <pxPortInitialiseStack>
 800423a:	4602      	mov	r2, r0
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800424c:	bf00      	nop
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800425c:	f001 fa86 	bl	800576c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004260:	4b40      	ldr	r3, [pc, #256]	@ (8004364 <prvAddNewTaskToReadyList+0x110>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a3f      	ldr	r2, [pc, #252]	@ (8004364 <prvAddNewTaskToReadyList+0x110>)
 8004268:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800426a:	4b3f      	ldr	r3, [pc, #252]	@ (8004368 <prvAddNewTaskToReadyList+0x114>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004272:	4a3d      	ldr	r2, [pc, #244]	@ (8004368 <prvAddNewTaskToReadyList+0x114>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004278:	4b3a      	ldr	r3, [pc, #232]	@ (8004364 <prvAddNewTaskToReadyList+0x110>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d110      	bne.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004280:	f000 fd7a 	bl	8004d78 <prvInitialiseTaskLists>
 8004284:	e00d      	b.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004286:	4b39      	ldr	r3, [pc, #228]	@ (800436c <prvAddNewTaskToReadyList+0x118>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800428e:	4b36      	ldr	r3, [pc, #216]	@ (8004368 <prvAddNewTaskToReadyList+0x114>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d802      	bhi.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800429c:	4a32      	ldr	r2, [pc, #200]	@ (8004368 <prvAddNewTaskToReadyList+0x114>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80042a2:	4b33      	ldr	r3, [pc, #204]	@ (8004370 <prvAddNewTaskToReadyList+0x11c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a31      	ldr	r2, [pc, #196]	@ (8004370 <prvAddNewTaskToReadyList+0x11c>)
 80042aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042ac:	4b30      	ldr	r3, [pc, #192]	@ (8004370 <prvAddNewTaskToReadyList+0x11c>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004374 <prvAddNewTaskToReadyList+0x120>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <prvAddNewTaskToReadyList+0x120>)
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ca:	492b      	ldr	r1, [pc, #172]	@ (8004378 <prvAddNewTaskToReadyList+0x124>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3304      	adds	r3, #4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	3204      	adds	r2, #4
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <prvAddNewTaskToReadyList+0x124>)
 800430a:	441a      	add	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	615a      	str	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004314:	4918      	ldr	r1, [pc, #96]	@ (8004378 <prvAddNewTaskToReadyList+0x124>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	4814      	ldr	r0, [pc, #80]	@ (8004378 <prvAddNewTaskToReadyList+0x124>)
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4403      	add	r3, r0
 8004330:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004332:	f001 fa4d 	bl	80057d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <prvAddNewTaskToReadyList+0x118>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00e      	beq.n	800435c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <prvAddNewTaskToReadyList+0x114>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	429a      	cmp	r2, r3
 800434a:	d207      	bcs.n	800435c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <prvAddNewTaskToReadyList+0x128>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	200001f4 	.word	0x200001f4
 8004368:	2000011c 	.word	0x2000011c
 800436c:	20000200 	.word	0x20000200
 8004370:	20000210 	.word	0x20000210
 8004374:	200001fc 	.word	0x200001fc
 8004378:	20000120 	.word	0x20000120
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d018      	beq.n	80043c4 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <vTaskDelay+0x64>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <vTaskDelay+0x32>
        __asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
    }
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80043b2:	f000 f86d 	bl	8004490 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043b6:	2100      	movs	r1, #0
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fd95 	bl	8004ee8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80043be:	f000 f875 	bl	80044ac <xTaskResumeAll>
 80043c2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80043ca:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <vTaskDelay+0x68>)
 80043cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000021c 	.word	0x2000021c
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80043f2:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <vTaskStartScheduler+0x88>)
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	2300      	movs	r3, #0
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	2282      	movs	r2, #130	@ 0x82
 80043fe:	491e      	ldr	r1, [pc, #120]	@ (8004478 <vTaskStartScheduler+0x8c>)
 8004400:	481e      	ldr	r0, [pc, #120]	@ (800447c <vTaskStartScheduler+0x90>)
 8004402:	f7ff fe51 	bl	80040a8 <xTaskCreate>
 8004406:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d102      	bne.n	8004414 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800440e:	f000 fdeb 	bl	8004fe8 <xTimerCreateTimerTask>
 8004412:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d116      	bne.n	8004448 <vTaskStartScheduler+0x5c>
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
    }
 800442c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800442e:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <vTaskStartScheduler+0x94>)
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004436:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <vTaskStartScheduler+0x98>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <vTaskStartScheduler+0x9c>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004442:	f001 f8ef 	bl	8005624 <xPortStartScheduler>
 8004446:	e00f      	b.n	8004468 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d10b      	bne.n	8004468 <vTaskStartScheduler+0x7c>
        __asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	607b      	str	r3, [r7, #4]
    }
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004468:	4b08      	ldr	r3, [pc, #32]	@ (800448c <vTaskStartScheduler+0xa0>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000218 	.word	0x20000218
 8004478:	08005d84 	.word	0x08005d84
 800447c:	08004d49 	.word	0x08004d49
 8004480:	20000214 	.word	0x20000214
 8004484:	20000200 	.word	0x20000200
 8004488:	200001f8 	.word	0x200001f8
 800448c:	2000000c 	.word	0x2000000c

08004490 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004494:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <vTaskSuspendAll+0x18>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a03      	ldr	r2, [pc, #12]	@ (80044a8 <vTaskSuspendAll+0x18>)
 800449c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	2000021c 	.word	0x2000021c

080044ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80044ba:	4b71      	ldr	r3, [pc, #452]	@ (8004680 <xTaskResumeAll+0x1d4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <xTaskResumeAll+0x2e>
        __asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
    }
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80044da:	f001 f947 	bl	800576c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80044de:	4b68      	ldr	r3, [pc, #416]	@ (8004680 <xTaskResumeAll+0x1d4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a66      	ldr	r2, [pc, #408]	@ (8004680 <xTaskResumeAll+0x1d4>)
 80044e6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e8:	4b65      	ldr	r3, [pc, #404]	@ (8004680 <xTaskResumeAll+0x1d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 80c0 	bne.w	8004672 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044f2:	4b64      	ldr	r3, [pc, #400]	@ (8004684 <xTaskResumeAll+0x1d8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80bb 	beq.w	8004672 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044fc:	e08a      	b.n	8004614 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044fe:	4b62      	ldr	r3, [pc, #392]	@ (8004688 <xTaskResumeAll+0x1dc>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	6a12      	ldr	r2, [r2, #32]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	69d2      	ldr	r2, [r2, #28]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3318      	adds	r3, #24
 8004528:	429a      	cmp	r2, r3
 800452a:	d103      	bne.n	8004534 <xTaskResumeAll+0x88>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	@ 0x28
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	68d2      	ldr	r2, [r2, #12]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	6892      	ldr	r2, [r2, #8]
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3304      	adds	r3, #4
 8004566:	429a      	cmp	r2, r3
 8004568:	d103      	bne.n	8004572 <xTaskResumeAll+0xc6>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2200      	movs	r2, #0
 8004576:	615a      	str	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	2201      	movs	r2, #1
 8004588:	409a      	lsls	r2, r3
 800458a:	4b40      	ldr	r3, [pc, #256]	@ (800468c <xTaskResumeAll+0x1e0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	4a3e      	ldr	r2, [pc, #248]	@ (800468c <xTaskResumeAll+0x1e0>)
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004598:	493d      	ldr	r1, [pc, #244]	@ (8004690 <xTaskResumeAll+0x1e4>)
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3304      	adds	r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	3204      	adds	r2, #4
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004690 <xTaskResumeAll+0x1e4>)
 80045d8:	441a      	add	r2, r3
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	615a      	str	r2, [r3, #20]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e2:	492b      	ldr	r1, [pc, #172]	@ (8004690 <xTaskResumeAll+0x1e4>)
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c59      	adds	r1, r3, #1
 80045f2:	4827      	ldr	r0, [pc, #156]	@ (8004690 <xTaskResumeAll+0x1e4>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4403      	add	r3, r0
 80045fe:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004604:	4b23      	ldr	r3, [pc, #140]	@ (8004694 <xTaskResumeAll+0x1e8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800460e:	4b22      	ldr	r3, [pc, #136]	@ (8004698 <xTaskResumeAll+0x1ec>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004614:	4b1c      	ldr	r3, [pc, #112]	@ (8004688 <xTaskResumeAll+0x1dc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f47f af70 	bne.w	80044fe <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004624:	f000 fc26 	bl	8004e74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004628:	4b1c      	ldr	r3, [pc, #112]	@ (800469c <xTaskResumeAll+0x1f0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004634:	f000 f846 	bl	80046c4 <xTaskIncrementTick>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800463e:	4b16      	ldr	r3, [pc, #88]	@ (8004698 <xTaskResumeAll+0x1ec>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3b01      	subs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f1      	bne.n	8004634 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <xTaskResumeAll+0x1f0>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <xTaskResumeAll+0x1ec>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800465e:	2301      	movs	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <xTaskResumeAll+0x1f4>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004672:	f001 f8ad 	bl	80057d0 <vPortExitCritical>

    return xAlreadyYielded;
 8004676:	69bb      	ldr	r3, [r7, #24]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	2000021c 	.word	0x2000021c
 8004684:	200001f4 	.word	0x200001f4
 8004688:	200001b4 	.word	0x200001b4
 800468c:	200001fc 	.word	0x200001fc
 8004690:	20000120 	.word	0x20000120
 8004694:	2000011c 	.word	0x2000011c
 8004698:	20000208 	.word	0x20000208
 800469c:	20000204 	.word	0x20000204
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <xTaskGetTickCount+0x1c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	200001f8 	.word	0x200001f8

080046c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	@ 0x28
 80046c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ce:	4b7e      	ldr	r3, [pc, #504]	@ (80048c8 <xTaskIncrementTick+0x204>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 80ed 	bne.w	80048b2 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046d8:	4b7c      	ldr	r3, [pc, #496]	@ (80048cc <xTaskIncrementTick+0x208>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80046e0:	4a7a      	ldr	r2, [pc, #488]	@ (80048cc <xTaskIncrementTick+0x208>)
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d121      	bne.n	8004730 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80046ec:	4b78      	ldr	r3, [pc, #480]	@ (80048d0 <xTaskIncrementTick+0x20c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <xTaskIncrementTick+0x4a>
        __asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	607b      	str	r3, [r7, #4]
    }
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <xTaskIncrementTick+0x46>
 800470e:	4b70      	ldr	r3, [pc, #448]	@ (80048d0 <xTaskIncrementTick+0x20c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	4b6f      	ldr	r3, [pc, #444]	@ (80048d4 <xTaskIncrementTick+0x210>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6d      	ldr	r2, [pc, #436]	@ (80048d0 <xTaskIncrementTick+0x20c>)
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4a6d      	ldr	r2, [pc, #436]	@ (80048d4 <xTaskIncrementTick+0x210>)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b6d      	ldr	r3, [pc, #436]	@ (80048d8 <xTaskIncrementTick+0x214>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	4a6b      	ldr	r2, [pc, #428]	@ (80048d8 <xTaskIncrementTick+0x214>)
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	f000 fba2 	bl	8004e74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004730:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <xTaskIncrementTick+0x218>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	429a      	cmp	r2, r3
 8004738:	f0c0 80a6 	bcc.w	8004888 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473c:	4b64      	ldr	r3, [pc, #400]	@ (80048d0 <xTaskIncrementTick+0x20c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004746:	4b65      	ldr	r3, [pc, #404]	@ (80048dc <xTaskIncrementTick+0x218>)
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	601a      	str	r2, [r3, #0]
                    break;
 800474e:	e09b      	b.n	8004888 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b5f      	ldr	r3, [pc, #380]	@ (80048d0 <xTaskIncrementTick+0x20c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004760:	6a3a      	ldr	r2, [r7, #32]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	429a      	cmp	r2, r3
 8004766:	d203      	bcs.n	8004770 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004768:	4a5c      	ldr	r2, [pc, #368]	@ (80048dc <xTaskIncrementTick+0x218>)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800476e:	e08b      	b.n	8004888 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	68d2      	ldr	r2, [r2, #12]
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	6892      	ldr	r2, [r2, #8]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3304      	adds	r3, #4
 8004792:	429a      	cmp	r2, r3
 8004794:	d103      	bne.n	800479e <xTaskIncrementTick+0xda>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1e5a      	subs	r2, r3, #1
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01e      	beq.n	80047f4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	6a12      	ldr	r2, [r2, #32]
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	69d2      	ldr	r2, [r2, #28]
 80047ce:	605a      	str	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3318      	adds	r3, #24
 80047d8:	429a      	cmp	r2, r3
 80047da:	d103      	bne.n	80047e4 <xTaskIncrementTick+0x120>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2200      	movs	r2, #0
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	2201      	movs	r2, #1
 80047fa:	409a      	lsls	r2, r3
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <xTaskIncrementTick+0x21c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4313      	orrs	r3, r2
 8004802:	4a37      	ldr	r2, [pc, #220]	@ (80048e0 <xTaskIncrementTick+0x21c>)
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480a:	4936      	ldr	r1, [pc, #216]	@ (80048e4 <xTaskIncrementTick+0x220>)
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	3304      	adds	r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	609a      	str	r2, [r3, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	3204      	adds	r2, #4
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <xTaskIncrementTick+0x220>)
 800484a:	441a      	add	r2, r3
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	615a      	str	r2, [r3, #20]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	4923      	ldr	r1, [pc, #140]	@ (80048e4 <xTaskIncrementTick+0x220>)
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	481f      	ldr	r0, [pc, #124]	@ (80048e4 <xTaskIncrementTick+0x220>)
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4403      	add	r3, r0
 8004870:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004876:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <xTaskIncrementTick+0x224>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	429a      	cmp	r2, r3
 800487e:	f67f af5d 	bls.w	800473c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8004882:	2301      	movs	r3, #1
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004886:	e759      	b.n	800473c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004888:	4b17      	ldr	r3, [pc, #92]	@ (80048e8 <xTaskIncrementTick+0x224>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	4915      	ldr	r1, [pc, #84]	@ (80048e4 <xTaskIncrementTick+0x220>)
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d901      	bls.n	80048a4 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80048a4:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <xTaskIncrementTick+0x228>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b0:	e004      	b.n	80048bc <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80048b2:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <xTaskIncrementTick+0x22c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a0d      	ldr	r2, [pc, #52]	@ (80048f0 <xTaskIncrementTick+0x22c>)
 80048ba:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3728      	adds	r7, #40	@ 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	2000021c 	.word	0x2000021c
 80048cc:	200001f8 	.word	0x200001f8
 80048d0:	200001ac 	.word	0x200001ac
 80048d4:	200001b0 	.word	0x200001b0
 80048d8:	2000020c 	.word	0x2000020c
 80048dc:	20000214 	.word	0x20000214
 80048e0:	200001fc 	.word	0x200001fc
 80048e4:	20000120 	.word	0x20000120
 80048e8:	2000011c 	.word	0x2000011c
 80048ec:	20000208 	.word	0x20000208
 80048f0:	20000204 	.word	0x20000204

080048f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048fa:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <vTaskSwitchContext+0xa4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004902:	4b26      	ldr	r3, [pc, #152]	@ (800499c <vTaskSwitchContext+0xa8>)
 8004904:	2201      	movs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004908:	e040      	b.n	800498c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800490a:	4b24      	ldr	r3, [pc, #144]	@ (800499c <vTaskSwitchContext+0xa8>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004910:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <vTaskSwitchContext+0xac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800491e:	7afb      	ldrb	r3, [r7, #11]
 8004920:	f1c3 031f 	rsb	r3, r3, #31
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	491f      	ldr	r1, [pc, #124]	@ (80049a4 <vTaskSwitchContext+0xb0>)
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <vTaskSwitchContext+0x5e>
        __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
    }
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <vTaskSwitchContext+0x5a>
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4a11      	ldr	r2, [pc, #68]	@ (80049a4 <vTaskSwitchContext+0xb0>)
 800495e:	4413      	add	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3308      	adds	r3, #8
 8004974:	429a      	cmp	r2, r3
 8004976:	d104      	bne.n	8004982 <vTaskSwitchContext+0x8e>
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4a07      	ldr	r2, [pc, #28]	@ (80049a8 <vTaskSwitchContext+0xb4>)
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	2000021c 	.word	0x2000021c
 800499c:	20000208 	.word	0x20000208
 80049a0:	200001fc 	.word	0x200001fc
 80049a4:	20000120 	.word	0x20000120
 80049a8:	2000011c 	.word	0x2000011c

080049ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
    }
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049d4:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <vTaskPlaceOnEventList+0x48>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3318      	adds	r3, #24
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff f808 	bl	80039f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049e2:	2101      	movs	r1, #1
 80049e4:	6838      	ldr	r0, [r7, #0]
 80049e6:	f000 fa7f 	bl	8004ee8 <prvAddCurrentTaskToDelayedList>
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000011c 	.word	0x2000011c

080049f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	613b      	str	r3, [r7, #16]
    }
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <vTaskPlaceOnEventListRestricted+0x88>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	61da      	str	r2, [r3, #28]
 8004a30:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <vTaskPlaceOnEventListRestricted+0x88>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	6892      	ldr	r2, [r2, #8]
 8004a38:	621a      	str	r2, [r3, #32]
 8004a3a:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <vTaskPlaceOnEventListRestricted+0x88>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	3218      	adds	r2, #24
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <vTaskPlaceOnEventListRestricted+0x88>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f103 0218 	add.w	r2, r3, #24
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <vTaskPlaceOnEventListRestricted+0x88>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	f000 fa38 	bl	8004ee8 <prvAddCurrentTaskToDelayedList>
    }
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	2000011c 	.word	0x2000011c

08004a84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b08b      	sub	sp, #44	@ 0x2c
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10b      	bne.n	8004ab2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	60fb      	str	r3, [r7, #12]
    }
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	e7fd      	b.n	8004aae <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	6a12      	ldr	r2, [r2, #32]
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	69d2      	ldr	r2, [r2, #28]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	3318      	adds	r3, #24
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d103      	bne.n	8004ae0 <xTaskRemoveFromEventList+0x5c>
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b4a      	ldr	r3, [pc, #296]	@ (8004c1c <xTaskRemoveFromEventList+0x198>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d15e      	bne.n	8004bb6 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	6a3a      	ldr	r2, [r7, #32]
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	6a3a      	ldr	r2, [r7, #32]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d103      	bne.n	8004b26 <xTaskRemoveFromEventList+0xa2>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	615a      	str	r2, [r3, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	4b38      	ldr	r3, [pc, #224]	@ (8004c20 <xTaskRemoveFromEventList+0x19c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	4a36      	ldr	r2, [pc, #216]	@ (8004c20 <xTaskRemoveFromEventList+0x19c>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4c:	4935      	ldr	r1, [pc, #212]	@ (8004c24 <xTaskRemoveFromEventList+0x1a0>)
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3304      	adds	r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	3204      	adds	r2, #4
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	1d1a      	adds	r2, r3, #4
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <xTaskRemoveFromEventList+0x1a0>)
 8004b8c:	441a      	add	r2, r3
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	615a      	str	r2, [r3, #20]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b96:	4923      	ldr	r1, [pc, #140]	@ (8004c24 <xTaskRemoveFromEventList+0x1a0>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	1c59      	adds	r1, r3, #1
 8004ba6:	481f      	ldr	r0, [pc, #124]	@ (8004c24 <xTaskRemoveFromEventList+0x1a0>)
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4403      	add	r3, r0
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	e01b      	b.n	8004bee <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c28 <xTaskRemoveFromEventList+0x1a4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	61da      	str	r2, [r3, #28]
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	621a      	str	r2, [r3, #32]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	3218      	adds	r2, #24
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f103 0218 	add.w	r2, r3, #24
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	4a11      	ldr	r2, [pc, #68]	@ (8004c28 <xTaskRemoveFromEventList+0x1a4>)
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004be4:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <xTaskRemoveFromEventList+0x1a4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a0f      	ldr	r2, [pc, #60]	@ (8004c28 <xTaskRemoveFromEventList+0x1a4>)
 8004bec:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <xTaskRemoveFromEventList+0x1a8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d905      	bls.n	8004c08 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <xTaskRemoveFromEventList+0x1ac>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e001      	b.n	8004c0c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	372c      	adds	r7, #44	@ 0x2c
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000021c 	.word	0x2000021c
 8004c20:	200001fc 	.word	0x200001fc
 8004c24:	20000120 	.word	0x20000120
 8004c28:	200001b4 	.word	0x200001b4
 8004c2c:	2000011c 	.word	0x2000011c
 8004c30:	20000208 	.word	0x20000208

08004c34 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <vTaskInternalSetTimeOutState+0x24>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <vTaskInternalSetTimeOutState+0x28>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	2000020c 	.word	0x2000020c
 8004c5c:	200001f8 	.word	0x200001f8

08004c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
    }
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
    }
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	e7fd      	b.n	8004ca2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004ca6:	f000 fd61 	bl	800576c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004caa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d28 <xTaskCheckForTimeOut+0xc8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e026      	b.n	8004d18 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <xTaskCheckForTimeOut+0xcc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d00a      	beq.n	8004cec <xTaskCheckForTimeOut+0x8c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d305      	bcc.n	8004cec <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e015      	b.n	8004d18 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d20b      	bcs.n	8004d0e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff96 	bl	8004c34 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e004      	b.n	8004d18 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004d18:	f000 fd5a 	bl	80057d0 <vPortExitCritical>

    return xReturn;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200001f8 	.word	0x200001f8
 8004d2c:	2000020c 	.word	0x2000020c

08004d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004d34:	4b03      	ldr	r3, [pc, #12]	@ (8004d44 <vTaskMissedYield+0x14>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000208 	.word	0x20000208

08004d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d50:	f000 f852 	bl	8004df8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <prvIdleTask+0x28>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d9f9      	bls.n	8004d50 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <prvIdleTask+0x2c>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004d6c:	e7f0      	b.n	8004d50 <prvIdleTask+0x8>
 8004d6e:	bf00      	nop
 8004d70:	20000120 	.word	0x20000120
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e00c      	b.n	8004d9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <prvInitialiseTaskLists+0x60>)
 8004d90:	4413      	add	r3, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fe00 	bl	8003998 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d9ef      	bls.n	8004d84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004da4:	480d      	ldr	r0, [pc, #52]	@ (8004ddc <prvInitialiseTaskLists+0x64>)
 8004da6:	f7fe fdf7 	bl	8003998 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004daa:	480d      	ldr	r0, [pc, #52]	@ (8004de0 <prvInitialiseTaskLists+0x68>)
 8004dac:	f7fe fdf4 	bl	8003998 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004db0:	480c      	ldr	r0, [pc, #48]	@ (8004de4 <prvInitialiseTaskLists+0x6c>)
 8004db2:	f7fe fdf1 	bl	8003998 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004db6:	480c      	ldr	r0, [pc, #48]	@ (8004de8 <prvInitialiseTaskLists+0x70>)
 8004db8:	f7fe fdee 	bl	8003998 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004dbc:	480b      	ldr	r0, [pc, #44]	@ (8004dec <prvInitialiseTaskLists+0x74>)
 8004dbe:	f7fe fdeb 	bl	8003998 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <prvInitialiseTaskLists+0x78>)
 8004dc4:	4a05      	ldr	r2, [pc, #20]	@ (8004ddc <prvInitialiseTaskLists+0x64>)
 8004dc6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <prvInitialiseTaskLists+0x7c>)
 8004dca:	4a05      	ldr	r2, [pc, #20]	@ (8004de0 <prvInitialiseTaskLists+0x68>)
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000120 	.word	0x20000120
 8004ddc:	20000184 	.word	0x20000184
 8004de0:	20000198 	.word	0x20000198
 8004de4:	200001b4 	.word	0x200001b4
 8004de8:	200001c8 	.word	0x200001c8
 8004dec:	200001e0 	.word	0x200001e0
 8004df0:	200001ac 	.word	0x200001ac
 8004df4:	200001b0 	.word	0x200001b0

08004df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dfe:	e019      	b.n	8004e34 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004e00:	f000 fcb4 	bl	800576c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e04:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <prvCheckTasksWaitingTermination+0x50>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fe27 	bl	8003a64 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e1e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <prvCheckTasksWaitingTermination+0x58>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	4a0a      	ldr	r2, [pc, #40]	@ (8004e50 <prvCheckTasksWaitingTermination+0x58>)
 8004e28:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004e2a:	f000 fcd1 	bl	80057d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f810 	bl	8004e54 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <prvCheckTasksWaitingTermination+0x58>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e1      	bne.n	8004e00 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200001c8 	.word	0x200001c8
 8004e4c:	200001f4 	.word	0x200001f4
 8004e50:	200001dc 	.word	0x200001dc

08004e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fe27 	bl	8005ab4 <vPortFree>
            vPortFree( pxTCB );
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fe24 	bl	8005ab4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <prvResetNextTaskUnblockTime+0x30>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004e82:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <prvResetNextTaskUnblockTime+0x34>)
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295
 8004e88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004e8a:	e005      	b.n	8004e98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <prvResetNextTaskUnblockTime+0x30>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a04      	ldr	r2, [pc, #16]	@ (8004ea8 <prvResetNextTaskUnblockTime+0x34>)
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	200001ac 	.word	0x200001ac
 8004ea8:	20000214 	.word	0x20000214

08004eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <xTaskGetSchedulerState+0x34>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	e008      	b.n	8004ed2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec0:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <xTaskGetSchedulerState+0x38>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	e001      	b.n	8004ed2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ed2:	687b      	ldr	r3, [r7, #4]
    }
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000200 	.word	0x20000200
 8004ee4:	2000021c 	.word	0x2000021c

08004ee8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004ef2:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef8:	4b35      	ldr	r3, [pc, #212]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fdb0 	bl	8003a64 <uxListRemove>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f0a:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	2201      	movs	r2, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43da      	mvns	r2, r3
 8004f18:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004f20:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d124      	bne.n	8004f74 <prvAddCurrentTaskToDelayedList+0x8c>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d021      	beq.n	8004f74 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f30:	4b29      	ldr	r3, [pc, #164]	@ (8004fd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	6892      	ldr	r2, [r2, #8]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	4b21      	ldr	r3, [pc, #132]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	3204      	adds	r2, #4
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	1d1a      	adds	r2, r3, #4
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004f64:	615a      	str	r2, [r3, #20]
 8004f66:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004f72:	e026      	b.n	8004fc2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d209      	bcs.n	8004fa0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f8c:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <prvAddCurrentTaskToDelayedList+0xf4>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f7fe fd2a 	bl	80039f2 <vListInsert>
}
 8004f9e:	e010      	b.n	8004fc2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f7fe fd20 	bl	80039f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d202      	bcs.n	8004fc2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004fbc:	4a09      	ldr	r2, [pc, #36]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6013      	str	r3, [r2, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200001f8 	.word	0x200001f8
 8004fd0:	2000011c 	.word	0x2000011c
 8004fd4:	200001fc 	.word	0x200001fc
 8004fd8:	200001e0 	.word	0x200001e0
 8004fdc:	200001b0 	.word	0x200001b0
 8004fe0:	200001ac 	.word	0x200001ac
 8004fe4:	20000214 	.word	0x20000214

08004fe8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004ff2:	f000 fa4f 	bl	8005494 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004ff6:	4b12      	ldr	r3, [pc, #72]	@ (8005040 <xTimerCreateTimerTask+0x58>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <xTimerCreateTimerTask+0x5c>)
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2302      	movs	r3, #2
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800500c:	490e      	ldr	r1, [pc, #56]	@ (8005048 <xTimerCreateTimerTask+0x60>)
 800500e:	480f      	ldr	r0, [pc, #60]	@ (800504c <xTimerCreateTimerTask+0x64>)
 8005010:	f7ff f84a 	bl	80040a8 <xTaskCreate>
 8005014:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	603b      	str	r3, [r7, #0]
    }
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005034:	687b      	ldr	r3, [r7, #4]
    }
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000250 	.word	0x20000250
 8005044:	20000254 	.word	0x20000254
 8005048:	08005d8c 	.word	0x08005d8c
 800504c:	080050f5 	.word	0x080050f5

08005050 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800505c:	e008      	b.n	8005070 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	18d1      	adds	r1, r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f8df 	bl	8005240 <prvInsertTimerInActiveList>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ea      	bne.n	800505e <prvReloadTimer+0xe>
        }
    }
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509e:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <prvProcessExpiredTimer+0x5c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe fcd9 	bl	8003a64 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ffc3 	bl	8005050 <prvReloadTimer>
 80050ca:	e008      	b.n	80050de <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	4798      	blx	r3
    }
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000248 	.word	0x20000248

080050f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050fc:	f107 0308 	add.w	r3, r7, #8
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f859 	bl	80051b8 <prvGetNextExpireTime>
 8005106:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4619      	mov	r1, r3
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f805 	bl	800511c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005112:	f000 f8d7 	bl	80052c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005116:	bf00      	nop
 8005118:	e7f0      	b.n	80050fc <prvTimerTask+0x8>
	...

0800511c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005126:	f7ff f9b3 	bl	8004490 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800512a:	f107 0308 	add.w	r3, r7, #8
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f866 	bl	8005200 <prvSampleTimeNow>
 8005134:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d130      	bne.n	800519e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <prvProcessTimerOrBlockTask+0x3c>
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	429a      	cmp	r2, r3
 8005148:	d806      	bhi.n	8005158 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800514a:	f7ff f9af 	bl	80044ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff9f 	bl	8005094 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005156:	e024      	b.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800515e:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <prvProcessTimerOrBlockTask+0x90>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <prvProcessTimerOrBlockTask+0x50>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <prvProcessTimerOrBlockTask+0x52>
 800516c:	2300      	movs	r3, #0
 800516e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005170:	4b0f      	ldr	r3, [pc, #60]	@ (80051b0 <prvProcessTimerOrBlockTask+0x94>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4619      	mov	r1, r3
 800517e:	f7fe ff5f 	bl	8004040 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005182:	f7ff f993 	bl	80044ac <xTaskResumeAll>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800518c:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <prvProcessTimerOrBlockTask+0x98>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
    }
 800519c:	e001      	b.n	80051a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800519e:	f7ff f985 	bl	80044ac <xTaskResumeAll>
    }
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	2000024c 	.word	0x2000024c
 80051b0:	20000250 	.word	0x20000250
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051c0:	4b0e      	ldr	r3, [pc, #56]	@ (80051fc <prvGetNextExpireTime+0x44>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <prvGetNextExpireTime+0x16>
 80051ca:	2201      	movs	r2, #1
 80051cc:	e000      	b.n	80051d0 <prvGetNextExpireTime+0x18>
 80051ce:	2200      	movs	r2, #0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051dc:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <prvGetNextExpireTime+0x44>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e001      	b.n	80051ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80051ec:	68fb      	ldr	r3, [r7, #12]
    }
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000248 	.word	0x20000248

08005200 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005208:	f7ff fa4c 	bl	80046a4 <xTaskGetTickCount>
 800520c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <prvSampleTimeNow+0x3c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d205      	bcs.n	8005224 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005218:	f000 f916 	bl	8005448 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e002      	b.n	800522a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800522a:	4a04      	ldr	r2, [pc, #16]	@ (800523c <prvSampleTimeNow+0x3c>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005230:	68fb      	ldr	r3, [r7, #12]
    }
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000258 	.word	0x20000258

08005240 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d812      	bhi.n	800528c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d302      	bcc.n	800527a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e01b      	b.n	80052b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800527a:	4b10      	ldr	r3, [pc, #64]	@ (80052bc <prvInsertTimerInActiveList+0x7c>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7fe fbb4 	bl	80039f2 <vListInsert>
 800528a:	e012      	b.n	80052b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d206      	bcs.n	80052a2 <prvInsertTimerInActiveList+0x62>
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e007      	b.n	80052b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a2:	4b07      	ldr	r3, [pc, #28]	@ (80052c0 <prvInsertTimerInActiveList+0x80>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe fba0 	bl	80039f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80052b2:	697b      	ldr	r3, [r7, #20]
    }
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	2000024c 	.word	0x2000024c
 80052c0:	20000248 	.word	0x20000248

080052c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052ca:	e0a9      	b.n	8005420 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f2c0 80a6 	blt.w	8005420 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fbbd 	bl	8003a64 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff87 	bl	8005200 <prvSampleTimeNow>
 80052f2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	f200 808e 	bhi.w	800541a <prvProcessReceivedCommands+0x156>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <prvProcessReceivedCommands+0x40>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005329 	.word	0x08005329
 8005308:	08005329 	.word	0x08005329
 800530c:	08005391 	.word	0x08005391
 8005310:	080053a5 	.word	0x080053a5
 8005314:	080053f1 	.word	0x080053f1
 8005318:	08005329 	.word	0x08005329
 800531c:	08005329 	.word	0x08005329
 8005320:	08005391 	.word	0x08005391
 8005324:	080053a5 	.word	0x080053a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	18d1      	adds	r1, r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	69f8      	ldr	r0, [r7, #28]
 8005348:	f7ff ff7a 	bl	8005240 <prvInsertTimerInActiveList>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d065      	beq.n	800541e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	4413      	add	r3, r2
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4619      	mov	r1, r3
 800536c:	69f8      	ldr	r0, [r7, #28]
 800536e:	f7ff fe6f 	bl	8005050 <prvReloadTimer>
 8005372:	e008      	b.n	8005386 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	69f8      	ldr	r0, [r7, #28]
 800538c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800538e:	e046      	b.n	800541e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80053a2:	e03d      	b.n	8005420 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <prvProcessReceivedCommands+0x118>
        __asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	617b      	str	r3, [r7, #20]
    }
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	18d1      	adds	r1, r2, r3
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	69f8      	ldr	r0, [r7, #28]
 80053ea:	f7ff ff29 	bl	8005240 <prvInsertTimerInActiveList>
                        break;
 80053ee:	e017      	b.n	8005420 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80053fe:	69f8      	ldr	r0, [r7, #28]
 8005400:	f000 fb58 	bl	8005ab4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005404:	e00c      	b.n	8005420 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	b2da      	uxtb	r2, r3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005418:	e002      	b.n	8005420 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <prvProcessReceivedCommands+0x15c>
                        break;
 800541e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005420:	4b08      	ldr	r3, [pc, #32]	@ (8005444 <prvProcessReceivedCommands+0x180>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f107 0108 	add.w	r1, r7, #8
 8005428:	2200      	movs	r2, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fc48 	bl	8003cc0 <xQueueReceive>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f47f af4a 	bne.w	80052cc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000250 	.word	0x20000250

08005448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800544e:	e009      	b.n	8005464 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005450:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <prvSwitchTimerLists+0x44>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800545a:	f04f 31ff 	mov.w	r1, #4294967295
 800545e:	6838      	ldr	r0, [r7, #0]
 8005460:	f7ff fe18 	bl	8005094 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005464:	4b09      	ldr	r3, [pc, #36]	@ (800548c <prvSwitchTimerLists+0x44>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <prvSwitchTimerLists+0x44>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005474:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <prvSwitchTimerLists+0x48>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a04      	ldr	r2, [pc, #16]	@ (800548c <prvSwitchTimerLists+0x44>)
 800547a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800547c:	4a04      	ldr	r2, [pc, #16]	@ (8005490 <prvSwitchTimerLists+0x48>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6013      	str	r3, [r2, #0]
    }
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000248 	.word	0x20000248
 8005490:	2000024c 	.word	0x2000024c

08005494 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005498:	f000 f968 	bl	800576c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800549c:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <prvCheckForValidListAndQueue+0x54>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11d      	bne.n	80054e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80054a4:	4811      	ldr	r0, [pc, #68]	@ (80054ec <prvCheckForValidListAndQueue+0x58>)
 80054a6:	f7fe fa77 	bl	8003998 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80054aa:	4811      	ldr	r0, [pc, #68]	@ (80054f0 <prvCheckForValidListAndQueue+0x5c>)
 80054ac:	f7fe fa74 	bl	8003998 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054b0:	4b10      	ldr	r3, [pc, #64]	@ (80054f4 <prvCheckForValidListAndQueue+0x60>)
 80054b2:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <prvCheckForValidListAndQueue+0x58>)
 80054b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <prvCheckForValidListAndQueue+0x64>)
 80054b8:	4a0d      	ldr	r2, [pc, #52]	@ (80054f0 <prvCheckForValidListAndQueue+0x5c>)
 80054ba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80054bc:	2200      	movs	r2, #0
 80054be:	210c      	movs	r1, #12
 80054c0:	200a      	movs	r0, #10
 80054c2:	f7fe fb8b 	bl	8003bdc <xQueueGenericCreate>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a07      	ldr	r2, [pc, #28]	@ (80054e8 <prvCheckForValidListAndQueue+0x54>)
 80054ca:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <prvCheckForValidListAndQueue+0x54>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054d4:	4b04      	ldr	r3, [pc, #16]	@ (80054e8 <prvCheckForValidListAndQueue+0x54>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4908      	ldr	r1, [pc, #32]	@ (80054fc <prvCheckForValidListAndQueue+0x68>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fd60 	bl	8003fa0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80054e0:	f000 f976 	bl	80057d0 <vPortExitCritical>
    }
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000250 	.word	0x20000250
 80054ec:	20000220 	.word	0x20000220
 80054f0:	20000234 	.word	0x20000234
 80054f4:	20000248 	.word	0x20000248
 80054f8:	2000024c 	.word	0x2000024c
 80054fc:	08005d94 	.word	0x08005d94

08005500 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b04      	subs	r3, #4
 8005510:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005518:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b04      	subs	r3, #4
 800551e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3b04      	subs	r3, #4
 800552e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005530:	4a0c      	ldr	r2, [pc, #48]	@ (8005564 <pxPortInitialiseStack+0x64>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3b14      	subs	r3, #20
 800553a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3b04      	subs	r3, #4
 8005546:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f06f 0202 	mvn.w	r2, #2
 800554e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b20      	subs	r3, #32
 8005554:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005556:	68fb      	ldr	r3, [r7, #12]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	08005569 	.word	0x08005569

08005568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005572:	4b13      	ldr	r3, [pc, #76]	@ (80055c0 <prvTaskExitError+0x58>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d00b      	beq.n	8005594 <prvTaskExitError+0x2c>
        __asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	60fb      	str	r3, [r7, #12]
    }
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <prvTaskExitError+0x28>
        __asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60bb      	str	r3, [r7, #8]
    }
 80055a6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80055a8:	bf00      	nop
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0fc      	beq.n	80055aa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000010 	.word	0x20000010
	...

080055d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80055d0:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <pxCurrentTCBConst2>)
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	6808      	ldr	r0, [r1, #0]
 80055d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	f380 8809 	msr	PSP, r0
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8811 	msr	BASEPRI, r0
 80055ea:	4770      	bx	lr
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst2>:
 80055f0:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80055f8:	4808      	ldr	r0, [pc, #32]	@ (800561c <prvPortStartFirstTask+0x24>)
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	6800      	ldr	r0, [r0, #0]
 80055fe:	f380 8808 	msr	MSP, r0
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8814 	msr	CONTROL, r0
 800560a:	b662      	cpsie	i
 800560c:	b661      	cpsie	f
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	df00      	svc	0
 8005618:	bf00      	nop
 800561a:	0000      	.short	0x0000
 800561c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop

08005624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800562a:	4b47      	ldr	r3, [pc, #284]	@ (8005748 <xPortStartScheduler+0x124>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a47      	ldr	r2, [pc, #284]	@ (800574c <xPortStartScheduler+0x128>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10b      	bne.n	800564c <xPortStartScheduler+0x28>
        __asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
    }
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800564c:	4b3e      	ldr	r3, [pc, #248]	@ (8005748 <xPortStartScheduler+0x124>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3f      	ldr	r2, [pc, #252]	@ (8005750 <xPortStartScheduler+0x12c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10b      	bne.n	800566e <xPortStartScheduler+0x4a>
        __asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
    }
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800566e:	4b39      	ldr	r3, [pc, #228]	@ (8005754 <xPortStartScheduler+0x130>)
 8005670:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	22ff      	movs	r2, #255	@ 0xff
 800567e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005690:	b2da      	uxtb	r2, r3
 8005692:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <xPortStartScheduler+0x134>)
 8005694:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005696:	4b31      	ldr	r3, [pc, #196]	@ (800575c <xPortStartScheduler+0x138>)
 8005698:	2207      	movs	r2, #7
 800569a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800569c:	e009      	b.n	80056b2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800569e:	4b2f      	ldr	r3, [pc, #188]	@ (800575c <xPortStartScheduler+0x138>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	4a2d      	ldr	r2, [pc, #180]	@ (800575c <xPortStartScheduler+0x138>)
 80056a6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d0ef      	beq.n	800569e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056be:	4b27      	ldr	r3, [pc, #156]	@ (800575c <xPortStartScheduler+0x138>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f1c3 0307 	rsb	r3, r3, #7
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d00b      	beq.n	80056e2 <xPortStartScheduler+0xbe>
        __asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60bb      	str	r3, [r7, #8]
    }
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056e2:	4b1e      	ldr	r3, [pc, #120]	@ (800575c <xPortStartScheduler+0x138>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <xPortStartScheduler+0x138>)
 80056ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <xPortStartScheduler+0x138>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056f4:	4a19      	ldr	r2, [pc, #100]	@ (800575c <xPortStartScheduler+0x138>)
 80056f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005700:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <xPortStartScheduler+0x13c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <xPortStartScheduler+0x13c>)
 8005706:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800570a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800570c:	4b14      	ldr	r3, [pc, #80]	@ (8005760 <xPortStartScheduler+0x13c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <xPortStartScheduler+0x13c>)
 8005712:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005716:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005718:	f000 f8e0 	bl	80058dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800571c:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <xPortStartScheduler+0x140>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005722:	f000 f8ff 	bl	8005924 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005726:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <xPortStartScheduler+0x144>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a0f      	ldr	r2, [pc, #60]	@ (8005768 <xPortStartScheduler+0x144>)
 800572c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005730:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005732:	f7ff ff61 	bl	80055f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005736:	f7ff f8dd 	bl	80048f4 <vTaskSwitchContext>
    prvTaskExitError();
 800573a:	f7ff ff15 	bl	8005568 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed00 	.word	0xe000ed00
 800574c:	410fc271 	.word	0x410fc271
 8005750:	410fc270 	.word	0x410fc270
 8005754:	e000e400 	.word	0xe000e400
 8005758:	2000025c 	.word	0x2000025c
 800575c:	20000260 	.word	0x20000260
 8005760:	e000ed20 	.word	0xe000ed20
 8005764:	20000010 	.word	0x20000010
 8005768:	e000ef34 	.word	0xe000ef34

0800576c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
        __asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	607b      	str	r3, [r7, #4]
    }
 8005784:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005786:	4b10      	ldr	r3, [pc, #64]	@ (80057c8 <vPortEnterCritical+0x5c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a0e      	ldr	r2, [pc, #56]	@ (80057c8 <vPortEnterCritical+0x5c>)
 800578e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005790:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <vPortEnterCritical+0x5c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d110      	bne.n	80057ba <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <vPortEnterCritical+0x60>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <vPortEnterCritical+0x4e>
        __asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	603b      	str	r3, [r7, #0]
    }
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <vPortEnterCritical+0x4a>
    }
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000010 	.word	0x20000010
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80057d6:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <vPortExitCritical+0x50>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <vPortExitCritical+0x26>
        __asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
    }
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <vPortExitCritical+0x50>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4a08      	ldr	r2, [pc, #32]	@ (8005820 <vPortExitCritical+0x50>)
 80057fe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005800:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <vPortExitCritical+0x50>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <vPortExitCritical+0x44>
 8005808:	2300      	movs	r3, #0
 800580a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005812:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000010 	.word	0x20000010
	...

08005830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005830:	f3ef 8009 	mrs	r0, PSP
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4b15      	ldr	r3, [pc, #84]	@ (8005890 <pxCurrentTCBConst>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f01e 0f10 	tst.w	lr, #16
 8005840:	bf08      	it	eq
 8005842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	6010      	str	r0, [r2, #0]
 800584c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005854:	f380 8811 	msr	BASEPRI, r0
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f7ff f848 	bl	80048f4 <vTaskSwitchContext>
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	f380 8811 	msr	BASEPRI, r0
 800586c:	bc09      	pop	{r0, r3}
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	6808      	ldr	r0, [r1, #0]
 8005872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005876:	f01e 0f10 	tst.w	lr, #16
 800587a:	bf08      	it	eq
 800587c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005880:	f380 8809 	msr	PSP, r0
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst>:
 8005890:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
        __asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	607b      	str	r3, [r7, #4]
    }
 80058b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80058b2:	f7fe ff07 	bl	80046c4 <xTaskIncrementTick>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058bc:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <SysTick_Handler+0x40>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f383 8811 	msr	BASEPRI, r3
    }
 80058ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <vPortSetupTimerInterrupt+0x34>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <vPortSetupTimerInterrupt+0x38>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <vPortSetupTimerInterrupt+0x3c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <vPortSetupTimerInterrupt+0x40>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	099b      	lsrs	r3, r3, #6
 80058f8:	4a09      	ldr	r2, [pc, #36]	@ (8005920 <vPortSetupTimerInterrupt+0x44>)
 80058fa:	3b01      	subs	r3, #1
 80058fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058fe:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <vPortSetupTimerInterrupt+0x34>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e010 	.word	0xe000e010
 8005914:	e000e018 	.word	0xe000e018
 8005918:	20000000 	.word	0x20000000
 800591c:	10624dd3 	.word	0x10624dd3
 8005920:	e000e014 	.word	0xe000e014

08005924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005934 <vPortEnableVFP+0x10>
 8005928:	6801      	ldr	r1, [r0, #0]
 800592a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800592e:	6001      	str	r1, [r0, #0]
 8005930:	4770      	bx	lr
 8005932:	0000      	.short	0x0000
 8005934:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop

0800593c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	@ 0x28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005948:	f7fe fda2 	bl	8004490 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800594c:	4b54      	ldr	r3, [pc, #336]	@ (8005aa0 <pvPortMalloc+0x164>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005954:	f000 f90c 	bl	8005b70 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d012      	beq.n	8005984 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800595e:	2208      	movs	r2, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	3308      	adds	r3, #8
 800596a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	43db      	mvns	r3, r3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d804      	bhi.n	8005980 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	4413      	add	r3, r2
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	e001      	b.n	8005984 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	db71      	blt.n	8005a6e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d06e      	beq.n	8005a6e <pvPortMalloc+0x132>
 8005990:	4b44      	ldr	r3, [pc, #272]	@ (8005aa4 <pvPortMalloc+0x168>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d869      	bhi.n	8005a6e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800599a:	4b43      	ldr	r3, [pc, #268]	@ (8005aa8 <pvPortMalloc+0x16c>)
 800599c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800599e:	4b42      	ldr	r3, [pc, #264]	@ (8005aa8 <pvPortMalloc+0x16c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059a4:	e004      	b.n	80059b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d903      	bls.n	80059c2 <pvPortMalloc+0x86>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f1      	bne.n	80059a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80059c2:	4b37      	ldr	r3, [pc, #220]	@ (8005aa0 <pvPortMalloc+0x164>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d050      	beq.n	8005a6e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2208      	movs	r2, #8
 80059d2:	4413      	add	r3, r2
 80059d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	1ad2      	subs	r2, r2, r3
 80059e6:	2308      	movs	r3, #8
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d920      	bls.n	8005a30 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <pvPortMalloc+0xdc>
        __asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
    }
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f000 f8fc 	bl	8005c28 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a30:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa4 <pvPortMalloc+0x168>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <pvPortMalloc+0x168>)
 8005a3c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a3e:	4b19      	ldr	r3, [pc, #100]	@ (8005aa4 <pvPortMalloc+0x168>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b1a      	ldr	r3, [pc, #104]	@ (8005aac <pvPortMalloc+0x170>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d203      	bcs.n	8005a52 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a4a:	4b16      	ldr	r3, [pc, #88]	@ (8005aa4 <pvPortMalloc+0x168>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	@ (8005aac <pvPortMalloc+0x170>)
 8005a50:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005a64:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <pvPortMalloc+0x174>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <pvPortMalloc+0x174>)
 8005a6c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005a6e:	f7fe fd1d 	bl	80044ac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <pvPortMalloc+0x158>
        __asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
    }
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	e7fd      	b.n	8005a90 <pvPortMalloc+0x154>
    return pvReturn;
 8005a94:	69fb      	ldr	r3, [r7, #28]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3728      	adds	r7, #40	@ 0x28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	2000fa6c 	.word	0x2000fa6c
 8005aa4:	2000fa70 	.word	0x2000fa70
 8005aa8:	2000fa64 	.word	0x2000fa64
 8005aac:	2000fa74 	.word	0x2000fa74
 8005ab0:	2000fa78 	.word	0x2000fa78

08005ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04b      	beq.n	8005b5e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	425b      	negs	r3, r3
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db0b      	blt.n	8005af4 <vPortFree+0x40>
        __asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	60fb      	str	r3, [r7, #12]
    }
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <vPortFree+0x60>
        __asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60bb      	str	r3, [r7, #8]
    }
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	0fdb      	lsrs	r3, r3, #31
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01c      	beq.n	8005b5e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d118      	bne.n	8005b5e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005b38:	f7fe fcaa 	bl	8004490 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <vPortFree+0xb4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4413      	add	r3, r2
 8005b46:	4a08      	ldr	r2, [pc, #32]	@ (8005b68 <vPortFree+0xb4>)
 8005b48:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f000 f86c 	bl	8005c28 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005b50:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <vPortFree+0xb8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a05      	ldr	r2, [pc, #20]	@ (8005b6c <vPortFree+0xb8>)
 8005b58:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005b5a:	f7fe fca7 	bl	80044ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2000fa70 	.word	0x2000fa70
 8005b6c:	2000fa7c 	.word	0x2000fa7c

08005b70 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b76:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005b7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005b7c:	4b25      	ldr	r3, [pc, #148]	@ (8005c14 <prvHeapInit+0xa4>)
 8005b7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <prvHeapInit+0xa4>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c18 <prvHeapInit+0xa8>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005bae:	4b1a      	ldr	r3, [pc, #104]	@ (8005c18 <prvHeapInit+0xa8>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0307 	bic.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <prvHeapInit+0xac>)
 8005bd0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005bd2:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <prvHeapInit+0xac>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005bda:	4b10      	ldr	r3, [pc, #64]	@ (8005c1c <prvHeapInit+0xac>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	1ad2      	subs	r2, r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <prvHeapInit+0xac>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a08      	ldr	r2, [pc, #32]	@ (8005c20 <prvHeapInit+0xb0>)
 8005bfe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a07      	ldr	r2, [pc, #28]	@ (8005c24 <prvHeapInit+0xb4>)
 8005c06:	6013      	str	r3, [r2, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000264 	.word	0x20000264
 8005c18:	2000fa64 	.word	0x2000fa64
 8005c1c:	2000fa6c 	.word	0x2000fa6c
 8005c20:	2000fa74 	.word	0x2000fa74
 8005c24:	2000fa70 	.word	0x2000fa70

08005c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c30:	4b28      	ldr	r3, [pc, #160]	@ (8005cd4 <prvInsertBlockIntoFreeList+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e002      	b.n	8005c3c <prvInsertBlockIntoFreeList+0x14>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d8f7      	bhi.n	8005c36 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d108      	bne.n	8005c6a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d118      	bne.n	8005cb0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b15      	ldr	r3, [pc, #84]	@ (8005cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d00d      	beq.n	8005ca6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	441a      	add	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e008      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e003      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d002      	beq.n	8005cc6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000fa64 	.word	0x2000fa64
 8005cd8:	2000fa6c 	.word	0x2000fa6c

08005cdc <memset>:
 8005cdc:	4402      	add	r2, r0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d100      	bne.n	8005ce6 <memset+0xa>
 8005ce4:	4770      	bx	lr
 8005ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cea:	e7f9      	b.n	8005ce0 <memset+0x4>

08005cec <__libc_init_array>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4d0d      	ldr	r5, [pc, #52]	@ (8005d24 <__libc_init_array+0x38>)
 8005cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8005d28 <__libc_init_array+0x3c>)
 8005cf2:	1b64      	subs	r4, r4, r5
 8005cf4:	10a4      	asrs	r4, r4, #2
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	42a6      	cmp	r6, r4
 8005cfa:	d109      	bne.n	8005d10 <__libc_init_array+0x24>
 8005cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8005d2c <__libc_init_array+0x40>)
 8005cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8005d30 <__libc_init_array+0x44>)
 8005d00:	f000 f826 	bl	8005d50 <_init>
 8005d04:	1b64      	subs	r4, r4, r5
 8005d06:	10a4      	asrs	r4, r4, #2
 8005d08:	2600      	movs	r6, #0
 8005d0a:	42a6      	cmp	r6, r4
 8005d0c:	d105      	bne.n	8005d1a <__libc_init_array+0x2e>
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d14:	4798      	blx	r3
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7ee      	b.n	8005cf8 <__libc_init_array+0xc>
 8005d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1e:	4798      	blx	r3
 8005d20:	3601      	adds	r6, #1
 8005d22:	e7f2      	b.n	8005d0a <__libc_init_array+0x1e>
 8005d24:	08005dbc 	.word	0x08005dbc
 8005d28:	08005dbc 	.word	0x08005dbc
 8005d2c:	08005dbc 	.word	0x08005dbc
 8005d30:	08005dc0 	.word	0x08005dc0

08005d34 <memcpy>:
 8005d34:	440a      	add	r2, r1
 8005d36:	4291      	cmp	r1, r2
 8005d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d3c:	d100      	bne.n	8005d40 <memcpy+0xc>
 8005d3e:	4770      	bx	lr
 8005d40:	b510      	push	{r4, lr}
 8005d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d4a:	4291      	cmp	r1, r2
 8005d4c:	d1f9      	bne.n	8005d42 <memcpy+0xe>
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
